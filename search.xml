<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PostgerSQL的介绍</title>
      <link href="2019/10/15/PostgerSQL/"/>
      <url>2019/10/15/PostgerSQL/</url>
      
        <content type="html"><![CDATA[<h2 id="初识-PostgerSQL"><a href="#初识-PostgerSQL" class="headerlink" title="初识 PostgerSQL"></a>初识 PostgerSQL</h2><p><img src="https://i.loli.net/2021/04/20/JcklWLKXN6UIF7s.png" alt="login.png"></p><h3 id="什么是PostgerSQL"><a href="#什么是PostgerSQL" class="headerlink" title="什么是PostgerSQL"></a>什么是PostgerSQL</h3><ul><li>PostgreSQL 的 Slogan 是 “世界上最先进的开源关系型数据库”，但我觉得这口号不够清晰，啥叫‘先进’？而且一看就是在怼 MySQL 那个 “世界上最流行的开源关系型数据库” 的口号，有碰瓷之嫌。要我说最能生动体现 PG 特色的描述应该是：一专多长的全栈数据库，一招鲜吃遍天。</li><li> PostgreSQL 是一个开源对象关系型数据库管理系统，并侧重于可扩展性和标准的符合性，被业界誉为 “最先进的开源数据库”。云数据库 PostgreSQL 面向企业复杂 SQL 处理的 OLTP 在线事务处理场景，支持 NoSQL 数据类型（JSON/XML/hstore），支持 GIS 地理信息处理，在可靠性、数据完整性方面有良好声誉，适用于互联网网站、位置应用系统、复杂数据对象处理等应用场景。可以说他是一个开源的 Oracle</li></ul><h3 id="为什么-PostgerSQL-给部分人一种，叫好不叫座的感觉"><a href="#为什么-PostgerSQL-给部分人一种，叫好不叫座的感觉" class="headerlink" title="为什么 PostgerSQL 给部分人一种，叫好不叫座的感觉"></a>为什么 PostgerSQL 给部分人一种，叫好不叫座的感觉</h3><ul><li><p>POSTGRESQL 不简单，功能多，不是迅速能上手的 </p></li><li><p>POSTGRESQL 到如今还有些架构师都不知道，对是的，不知道 </p></li><li><p>成本原因，POSTGRESQL 再好，我请不到会的人，精通的人，这不是发一个 JD，马上就是很多人来响应的工作，没有多少人去精通，所以企业找不到合适的人，自然就限制了 POSTGRESQL 的发展</p></li><li><p>相互的问题，如果企业不使用 POSTGRESQL ，那自然会的人就少，会的越少，会走两个极端， 物以稀为贵，或者是没人用，例如某蓝色巨人的数据库。当然显然 POSTGRESQL 不是后者。 </p></li><li><p>利益问题，因为学习任何一样东西都不是容易的事情，所以任何已经占据利益群体，拥有这部分利益群体的人，就会打压，任何世界，利益是永恒的事情，这些人并没有什么不对，捍卫自己的利益，有什么错。 </p></li><li><p>相关的学习资源少，不用多说 2 年前，你要能看到如今这么多的 POSTGRESQL 的中文文字，那是很难的。</p></li></ul><h3 id="PostgerSQL的优点"><a href="#PostgerSQL的优点" class="headerlink" title="PostgerSQL的优点"></a>PostgerSQL的优点</h3><ul><li><p>PostgreSQL 是一个开源的，免费的，同时非常强大的关系型数据管理系统。 </p></li><li><p>PostgreSQL 背后有热忱而经验丰富的社区，可以通过知识库和问答网站获取支持，全天候免费。</p></li><li><p>即使其本身功能十分强大，PostgreSQL 仍附带有许多强大的开源第三方工具来辅助系统的设计、管理和使用。 </p></li><li><p>可以用预先存储的流程来程序性扩展 PostgreSQL，一个高级的关系型数据库理应如此。</p></li><li><p>PostgreSQL 不只是一个关系型数据库，还是一个面向对象数据库 —— 支持嵌套，及一些其他功能。</p></li></ul><h2 id="在-WIN10-系统利用-Docker-安装-PostgrelSQL"><a href="#在-WIN10-系统利用-Docker-安装-PostgrelSQL" class="headerlink" title="在 WIN10 系统利用 Docker 安装 PostgrelSQL"></a>在 WIN10 系统利用 Docker 安装 PostgrelSQL</h2><ul><li><p>拉取镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull postgres:11.1</span><br></pre></td></tr></table></figure></li><li><p>拉取成功后，输入命令查看镜像，它的镜像非常小，大概 300m 左右，比 Mysql 小很多</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure></li><li><p>然后我们就可以将容器启动了，输入命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name dev-postgres -e POSTGRES_PASSWORD=root -p 5432:5432 postgres:11.1</span><br></pre></td></tr></table></figure></li><li><p>这里 POSTGRES_PASSWORD 是 PostgrelSQL 的用户密码，自己制定一个就可以了，默认端口号是 5432。 </p></li><li><p>查看镜像是否已经运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/04/20/qjuo97a3YFCcJZ1.png" alt="运行状态.png"></p></li><li><p>进入 docker 容器内部，直接链接即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it dev-postgres bash</span><br><span class="line">psql -h localhost -U postgres</span><br></pre></td></tr></table></figure></li></ul><h3 id="PostgrelSQL-常见命令"><a href="#PostgrelSQL-常见命令" class="headerlink" title="PostgrelSQL 常见命令"></a>PostgrelSQL 常见命令</h3><ul><li><p>查看数据库（字母 l）  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">|</span>l </span><br></pre></td></tr></table></figure></li><li><p>使用数据库 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\c databaseName </span><br></pre></td></tr></table></figure></li><li><p>查看表架构 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\dn </span><br></pre></td></tr></table></figure></li><li><p>创建新表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> user_tbl(name <span class="type">VARCHAR</span>(<span class="number">20</span>), signup_date <span class="type">DATE</span>); </span><br></pre></td></tr></table></figure></li><li><p>插入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_tbl(name, signup_date) <span class="keyword">VALUES</span>(<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;2013-12-22&#x27;</span>); </span><br></pre></td></tr></table></figure></li><li><p>选择记录 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名; </span><br></pre></td></tr></table></figure></li><li><p>更新数据 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE user_tbl <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;李四&#x27;</span> <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>; </span><br></pre></td></tr></table></figure></li><li><p>删除数据  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> user_tbl <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;李四&#x27;</span> ;</span><br></pre></td></tr></table></figure></li><li><p>添加栏位（字段） </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> user_tbl <span class="keyword">ADD</span> email <span class="type">VARCHAR</span>(<span class="number">40</span>); </span><br></pre></td></tr></table></figure></li><li><p>更新结构 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> user_tbl <span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> signup_date <span class="keyword">SET</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>; </span><br></pre></td></tr></table></figure></li><li><p>更改字段名 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> user_tbl RENAME <span class="keyword">COLUMN</span> signup_date <span class="keyword">TO</span> signup; </span><br></pre></td></tr></table></figure></li><li><p>删除字段  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> user_tbl <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> email;</span><br></pre></td></tr></table></figure></li><li><p>表格更名 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> user_tbl RENAME <span class="keyword">TO</span> backup_tbl; </span><br></pre></td></tr></table></figure></li><li><p>删除表 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> backup_tbl;</span><br></pre></td></tr></table></figure></li><li><p>其他控制台命令</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">\h：查看<span class="keyword">SQL</span>命令的解释，比如\h <span class="keyword">select</span>。</span><br><span class="line">\?：查看psql命令列表。</span><br><span class="line">\l：列出所有数据库。</span><br><span class="line">\c [database_name]：连接其他数据库。</span><br><span class="line">\d：列出当前数据库的所有表格。</span><br><span class="line">\d [table_name]：列出某一张表格的结构。</span><br><span class="line">\du：列出所有用户。</span><br><span class="line">\e：打开文本编辑器。</span><br><span class="line">\conninfo：列出当前数据库和连接的信息。</span><br></pre></td></tr></table></figure></li></ul><h3 id="开始使用-Postgresql"><a href="#开始使用-Postgresql" class="headerlink" title="开始使用 Postgresql"></a>开始使用 Postgresql</h3><ul><li><p>如果不习惯使用命令行，也可以用可视化工具来进行链接，比如 Navicat, 但是 Navicat 只有 15 版本才有 pg，但 15 版本是收费的，我会出一期 Navicat 破解</p><p><img src="https://i.loli.net/2021/04/20/n6RmSB8lfZ7Tr3x.png" alt="Navicat.png"></p></li><li><p>注意默认用户是 postgres，密码则是 docker 启动镜像是写的密码。值得一提的是，使用 navicat 无法像 Mysql 一样手动设置属性自增长 (auto-increment)，PostgrelSQL 使用的是序列的形式来实现自增长：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> SEQUENCE serial <span class="keyword">START</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li><li><p>这里创建好的序列是从 1 开始计数。随后，将需要设置的字段的默认值设为序列增长即可</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> &quot;public&quot;.&quot;article&quot; <span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> &quot;id&quot; <span class="keyword">SET</span> <span class="keyword">DEFAULT</span> nextval(<span class="string">&#x27;serial&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>可以使用 utf-8 编码轻松存储 Emoji</p><p><img src="https://i.loli.net/2021/04/20/MQ7LnO8o3GZUAPT.png" alt="emjoi.png"></p></li><li><p>over 子句的应用，假设我们有一个员工薪资的表（部门、员工 id，工资）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">postgres<span class="operator">=</span># d empsal </span><br><span class="line">          <span class="keyword">Table</span> &quot;public.empsal&quot;</span><br><span class="line"> <span class="keyword">Column</span>  <span class="operator">|</span>       Type        <span class="operator">|</span> Modifiers </span><br><span class="line"><span class="comment">---------+-------------------+-----------</span></span><br><span class="line"> depname <span class="operator">|</span> <span class="type">character</span> <span class="type">varying</span> <span class="operator">|</span> </span><br><span class="line"> empno   <span class="operator">|</span> <span class="type">integer</span>           <span class="operator">|</span> </span><br><span class="line"> salary  <span class="operator">|</span> <span class="type">integer</span>           <span class="operator">|</span></span><br></pre></td></tr></table></figure></li><li><p>数据为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">postgres<span class="operator">=</span># <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> empsal ;</span><br><span class="line">  depname  <span class="operator">|</span> empno <span class="operator">|</span> salary </span><br><span class="line"><span class="comment">-----------+-------+--------</span></span><br><span class="line"> develop   <span class="operator">|</span>    <span class="number">11</span> <span class="operator">|</span>   <span class="number">5200</span></span><br><span class="line"> develop   <span class="operator">|</span>     <span class="number">7</span> <span class="operator">|</span>   <span class="number">4200</span></span><br><span class="line"> develop   <span class="operator">|</span>     <span class="number">9</span> <span class="operator">|</span>   <span class="number">4500</span></span><br><span class="line"> develop   <span class="operator">|</span>     <span class="number">8</span> <span class="operator">|</span>   <span class="number">6000</span></span><br><span class="line"> develop   <span class="operator">|</span>    <span class="number">10</span> <span class="operator">|</span>   <span class="number">5200</span></span><br><span class="line"> personnel <span class="operator">|</span>     <span class="number">5</span> <span class="operator">|</span>   <span class="number">3500</span></span><br><span class="line"> personnel <span class="operator">|</span>     <span class="number">2</span> <span class="operator">|</span>   <span class="number">3900</span></span><br><span class="line"> sales     <span class="operator">|</span>     <span class="number">3</span> <span class="operator">|</span>   <span class="number">4800</span></span><br><span class="line"> sales     <span class="operator">|</span>     <span class="number">1</span> <span class="operator">|</span>   <span class="number">5000</span></span><br><span class="line"> sales     <span class="operator">|</span>     <span class="number">4</span> <span class="operator">|</span>   <span class="number">4800</span></span><br><span class="line">(<span class="number">10</span> <span class="keyword">rows</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>现在我想将每一个员工的工资与他所在部门的平均工资做个比较，怎么做？其实这也是 leetcode 原题，用 mysql 只能用子查询，而用 PostgrelSQL 该查询可以很容易的实现</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> depname, empno, salary, <span class="built_in">avg</span>(salary) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> depname) <span class="keyword">FROM</span> empsal;</span><br></pre></td></tr></table></figure></li><li><p>结果为:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">depname  <span class="operator">|</span> empno <span class="operator">|</span> salary <span class="operator">|</span>          avg          </span><br><span class="line"><span class="comment">-----------+-------+--------+-----------------------</span></span><br><span class="line"> develop   <span class="operator">|</span>    <span class="number">11</span> <span class="operator">|</span>   <span class="number">5200</span> <span class="operator">|</span> <span class="number">5020.0000000000000000</span></span><br><span class="line"> develop   <span class="operator">|</span>     <span class="number">7</span> <span class="operator">|</span>   <span class="number">4200</span> <span class="operator">|</span> <span class="number">5020.0000000000000000</span></span><br><span class="line"> develop   <span class="operator">|</span>     <span class="number">9</span> <span class="operator">|</span>   <span class="number">4500</span> <span class="operator">|</span> <span class="number">5020.0000000000000000</span></span><br><span class="line"> develop   <span class="operator">|</span>     <span class="number">8</span> <span class="operator">|</span>   <span class="number">6000</span> <span class="operator">|</span> <span class="number">5020.0000000000000000</span></span><br><span class="line"> develop   <span class="operator">|</span>    <span class="number">10</span> <span class="operator">|</span>   <span class="number">5200</span> <span class="operator">|</span> <span class="number">5020.0000000000000000</span></span><br><span class="line"> personnel <span class="operator">|</span>     <span class="number">5</span> <span class="operator">|</span>   <span class="number">3500</span> <span class="operator">|</span> <span class="number">3700.0000000000000000</span></span><br><span class="line"> personnel <span class="operator">|</span>     <span class="number">2</span> <span class="operator">|</span>   <span class="number">3900</span> <span class="operator">|</span> <span class="number">3700.0000000000000000</span></span><br><span class="line"> sales     <span class="operator">|</span>     <span class="number">3</span> <span class="operator">|</span>   <span class="number">4800</span> <span class="operator">|</span> <span class="number">4866.6666666666666667</span></span><br><span class="line"> sales     <span class="operator">|</span>     <span class="number">1</span> <span class="operator">|</span>   <span class="number">5000</span> <span class="operator">|</span> <span class="number">4866.6666666666666667</span></span><br><span class="line"> sales     <span class="operator">|</span>     <span class="number">4</span> <span class="operator">|</span>   <span class="number">4800</span> <span class="operator">|</span> <span class="number">4866.6666666666666667</span></span><br><span class="line">(<span class="number">10</span> <span class="keyword">rows</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>可以看到，这个查询中，聚合函数 avg 的含义没有变，仍然是求平均值。但和普通的聚合函数不同的是，它不再对表中所有的 salary 求平均值，而是针对同一个部门（PARTITION BY 指定的 depname）内的 salary 求平均值，而且得到的结果由同一个部门内的所有行共享，并没有将这些行合并，这就大大简化了 sql 的复杂度，同时也能很方便的解决 “每组取 top k” 的这类问题。 </p></li><li><p>使用容器启动数据库会有个问题，就是每次容器停止，数据就会丢失，所有我们可以用 docker 的挂载命令将数据存在宿主机中，这样就可以持久化保存数据：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name dev-postgres -e POSTGRES_PASSWORD=root -e PGDATA=/var/lib/postgresql/data/pgdata -v /custom/mount:/var/lib/postgresql/data  -p 6432:5432 postgres:11.1</span><br></pre></td></tr></table></figure></li><li><p>如果你不习惯 navicat 这样的桌面可视化工具，也可以使用类似 pgadmin4 这样的网页端工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker pull dpage/pgadmin4</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run</span>  </span><br><span class="line">    -p 80:80 </span><br><span class="line">    -e &#x27;PGADMIN_DEFAULT_EMAIL=user@domain.local&#x27; </span><br><span class="line">    -e &#x27;PGADMIN_DEFAULT_PASSWORD=SuperSecret&#x27; </span><br><span class="line">    --name dev-pgadmin  </span><br><span class="line">    -d dpage/pgadmin4</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/04/20/u6ylJq3Zpar75Ev.png" alt="pgAdmin.png"></p></li></ul><h3 id="身为一个主学-python-的开发人员，肯定要与-Python-进行交互的"><a href="#身为一个主学-python-的开发人员，肯定要与-Python-进行交互的" class="headerlink" title="身为一个主学 python 的开发人员，肯定要与 Python 进行交互的"></a>身为一个主学 python 的开发人员，肯定要与 Python 进行交互的</h3><ul><li><p>安装三方库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 isntall psycopg2</span><br></pre></td></tr></table></figure></li><li><p>脚本文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> psycopg2</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> psycopg2.extras</span><br><span class="line"></span><br><span class="line">conn = psycopg2.connect(host=<span class="string">&#x27;localhost&#x27;</span>, port=<span class="number">6432</span>, user=<span class="string">&#x27;postgres&#x27;</span>, password=<span class="string">&#x27;root&#x27;</span>, database=<span class="string">&#x27;mytest&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cursor = conn.cursor(cursor_factory=psycopg2.extras.DictCursor) </span><br><span class="line"></span><br><span class="line">cursor.execute(<span class="string">&#x27;SELECT * FROM article WHERE id = 1;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">result = cursor.fetchone()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure></li></ul><h3 id="结语："><a href="#结语：" class="headerlink" title="#  结语："></a>#  结语：</h3><p><strong>如果对 Mysql 足够熟悉，那么上手 PostgrelSQL 并不是一件难事，自从 MySQL 被 Oracle 收购的那一刻起，它就已经不是开源软件的最佳选择了。还是那句话，火车，飞机可以晚点，但他仅仅是晚点，不会不到，不少单位已经开始替换某些收费数据库，或者在最新数据库选型中使用 PG</strong></p>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 类型 </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ECharts 的使用</title>
      <link href="2019/10/06/ECharts%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>2019/10/06/ECharts%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="echarts-实例"><a href="#echarts-实例" class="headerlink" title="echarts 实例"></a>echarts 实例</h3><p>一个网页中可以创建多个 echarts 实例 。每个 echarts 实例 中可以创建多个图表和坐标系等等（用 option 来描述）。准备一个 DOM 节点（作为 echarts 的渲染容器），就可以在上面创建一个 echarts 实例。每个 echarts 实例独占一个 DOM 节点。</p><p><img src="https://i.loli.net/2021/04/20/cLw2RT3pnZU5zot.png" alt="实例1.png"></p><h3 id="系列（series）"><a href="#系列（series）" class="headerlink" title="系列（series）"></a>系列（series）</h3><ul><li><p>系列 （series）是很常见的名词。在 echarts 里， 系列 （series）是指：一组数值以及他们映射成的图。“系列” 这个词原本可能来源于 “一系列的数据”，而在 echarts 中取其扩展的概念，不仅表示数据，也表示数据映射成为的图。所以，一个 系列 包含的要素至少有：一组数值、图表类型（ series.type ）、以及其他的关于这些数据如何映射成图的参数。</p></li><li><p> echarts 里系列类型（ series.type ）就是图表类型。系列类型（ series.type ）至少有：line（折线图）、bar（柱状图）、pie（饼图）、scatter（散点图）、graph（关系图）、tree（树图）</p></li><li><p> 如下图，右侧的 option 中声明了三个 系列 （series）：pie（饼图系列）、line（折线图系列）、bar（柱状图系列），每个系列中有他所需要的数据（series.data）</p></li></ul><p><img src="https://i.loli.net/2021/04/20/lDtcuE531YvyWS7.png" alt="系列1.png"></p><ul><li>类同地，下图中是另一种配置方式，系列的数据从 dataset 中取：</li></ul><p><img src="https://i.loli.net/2021/04/20/xWT3XwbJOioeAS9.png" alt="实例2.png"></p><h3 id="组件（component）"><a href="#组件（component）" class="headerlink" title="组件（component）"></a>组件（component）</h3><ul><li>在系列之上，echarts 中各种内容，被抽象为 “组件”。例如，echarts 中至少有这些组件：xAxis（直角坐标系 X 轴）、yAxis（直角坐标系 Y 轴）、grid（直角坐标系底板）、angleAxis（极坐标系角度轴）、radiusAxis（极坐标系半径轴）、polar（极坐标系底板）、geo（地理坐标系）、dataZoom（数据区缩放组件）、visualMap（视觉映射组件）、tooltip（提示框组件）、toolbox（工具栏组件）、series（系列）、… </li><li>我们注意到，其实系列（series）也是一种组件，可以理解为：系列是专门绘制 “图” 的组件。 </li><li>如下图，右侧的 option 中声明了各个组件（包括系列），各个组件就出现在图中。</li></ul><p><img src="https://i.loli.net/2021/04/20/6wEDF9luaCN4KPW.png" alt="组件.png"></p><h2 id="话不多说上代码"><a href="#话不多说上代码" class="headerlink" title="话不多说上代码"></a>话不多说上代码</h2><h3 id="直接引入-echarts"><a href="#直接引入-echarts" class="headerlink" title="直接引入 echarts"></a>直接引入 echarts</h3><ul><li><p><strong>安装 echarts 项目依赖</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install echarts --save</span><br><span class="line">// 或者</span><br><span class="line">npm install echarts -S</span><br></pre></td></tr></table></figure></li><li><p><strong>全局引入</strong></p><p>我们安装完成之后，可以在 main.js 中全局引入 echarts</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import echarts from &quot;echarts&quot;;</span><br><span class="line">Vue.prototype.$echarts &#x3D; echarts;</span><br></pre></td></tr></table></figure></li><li><p><strong>创建柱形图表</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;main&quot; style&#x3D;&quot;width: 600px;height:400px;&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;app&quot;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    drawChart() &#123;</span><br><span class="line">      &#x2F;&#x2F; 基于准备好的dom，初始化echarts实例</span><br><span class="line">      let myChart &#x3D; this.$echarts.init(document.getElementById(&quot;main&quot;));</span><br><span class="line">      &#x2F;&#x2F; 指定图表的配置项和数据</span><br><span class="line">      let option &#x3D; &#123;</span><br><span class="line">        title: &#123;</span><br><span class="line">          text: &quot;ECharts 入门示例&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        tooltip: &#123;&#125;,</span><br><span class="line">        legend: &#123;</span><br><span class="line">          data: [&quot;销量&quot;]</span><br><span class="line">        &#125;,</span><br><span class="line">        xAxis: &#123;</span><br><span class="line">          data: [&quot;衬衫&quot;, &quot;羊毛衫&quot;, &quot;雪纺衫&quot;, &quot;裤子&quot;, &quot;高跟鞋&quot;, &quot;袜子&quot;]</span><br><span class="line">        &#125;,</span><br><span class="line">        yAxis: &#123;&#125;,</span><br><span class="line">        series: [</span><br><span class="line">          &#123;</span><br><span class="line">            name: &quot;销量&quot;,</span><br><span class="line">            type: &quot;bar&quot;,</span><br><span class="line">            data: [5, 20, 36, 10, 10, 20]</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;;</span><br><span class="line">      &#x2F;&#x2F; 使用刚指定的配置项和数据显示图表。</span><br><span class="line">      myChart.setOption(option);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    this.drawChart();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>用 websocket 实现实时折线图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;myChart&quot; class&#x3D;&quot;chart&quot; :style&#x3D;&quot;&#123;width: &#39;100%&#39;, height: &#39;500px&#39;&#125;&quot; :option&#x3D;&#39;loadLine&#39;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script&gt;</span><br><span class="line">import echarts from &#39;echarts&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;xwPassengerFlow&#39;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      Time: [], &#x2F;&#x2F;x 轴数据，可根据需求</span><br><span class="line">      NewZealand: [], &#x2F;&#x2F; 数据 1</span><br><span class="line">      USA: [], &#x2F;&#x2F; 数据 2</span><br><span class="line">      Australia:[] &#x2F;&#x2F; 数据 3</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">       this.loadLine()       &#x2F;&#x2F; 渲染折线图</span><br><span class="line">       this.websocketinit()  &#x2F;&#x2F; 钩子函数中链接 websocket</span><br><span class="line">  &#125;,</span><br><span class="line">  watch:&#123;    &#x2F;&#x2F; 实现监听，当有新数据再次渲染</span><br><span class="line">  Time:function()&#123;</span><br><span class="line">  this.loadLine()</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    loadLine() &#123;</span><br><span class="line">      var option &#x3D; &#123;</span><br><span class="line">        title: &#123;</span><br><span class="line">          text: &#39;折线图堆叠&#39;</span><br><span class="line">        &#125;,</span><br><span class="line">        tooltip: &#123;</span><br><span class="line">          trigger: &#39;axis&#39;</span><br><span class="line">        &#125;,</span><br><span class="line">        legend: &#123;</span><br><span class="line">          data:[ &#39;新西兰元&#39;, &#39;澳大利亚元&#39;, &#39;美元&#39;]</span><br><span class="line">        &#125;,</span><br><span class="line">        grid: &#123;</span><br><span class="line">          left: &#39;3%&#39;,</span><br><span class="line">          right: &#39;4%&#39;,</span><br><span class="line">          bottom: &#39;3%&#39;,</span><br><span class="line">          containLabel: true</span><br><span class="line">        &#125;,</span><br><span class="line">        xAxis: &#123;</span><br><span class="line">          type: &#39;category&#39;,</span><br><span class="line">          boundaryGap: false,</span><br><span class="line">          data: this.Time &#x2F;&#x2F;x 轴数据</span><br><span class="line">        &#125;,</span><br><span class="line">        yAxis: &#123;</span><br><span class="line">          type: &#39;value&#39;</span><br><span class="line">        &#125;,</span><br><span class="line">        series: [</span><br><span class="line">        </span><br><span class="line">          &#123;</span><br><span class="line">            name: &#39;新西兰元&#39;,</span><br><span class="line">            type: &#39;line&#39;,</span><br><span class="line">      </span><br><span class="line">            data: this.NewZealand &#x2F;&#x2F;y 轴数据 2</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            name: &#39;澳大利亚元&#39;,</span><br><span class="line">            type: &#39;line&#39;,</span><br><span class="line">            data: this.Australia&#x2F;&#x2F;y 轴数据 3</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            name: &#39;美元&#39;,</span><br><span class="line">            type: &#39;line&#39;,</span><br><span class="line">            stack: &#39;总量&#39;,</span><br><span class="line">            data: this.USA &#x2F;&#x2F;y 轴数据 5</span><br><span class="line">          &#125;,</span><br><span class="line">       </span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">      this.myChartOne &#x3D; echarts.init(document.getElementById(&#39;myChart&#39;))</span><br><span class="line">      this.myChartOne.setOption(option)</span><br><span class="line">    &#125;,</span><br><span class="line">     &#x2F;&#x2F; 连接聊天</span><br><span class="line">    websocketinit:function()&#123;</span><br><span class="line">        &#x2F;&#x2F; 判断浏览器是否支持 websocket</span><br><span class="line">  if(&#39;WebSocket&#39; in window)&#123;</span><br><span class="line">    console.log(&#39;支持&#39;)</span><br><span class="line">    &#x2F;&#x2F; 生成 websocket 连接</span><br><span class="line">    var ws &#x3D; new WebSocket(&#39;ws:&#x2F;&#x2F;192.168.1.27:8000&#x2F;apps&#x2F;websocketlink&#x2F;&#39;)</span><br><span class="line">    &#x2F;&#x2F; var ws &#x3D; new WebSocket(&#39;ws:&#x2F;&#x2F;192.168.1.157:8000&#x2F;chat_room_websocket&#x2F;&#39;)</span><br><span class="line">    &#x2F;&#x2F; 发送链接请求</span><br><span class="line">    ws.onopen &#x3D; function () &#123;</span><br><span class="line">      ws.send(&#39;test&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 发送消息</span><br><span class="line">    ws.onmessage &#x3D;  (evt) &#x3D;&gt;&#123;</span><br><span class="line">      &#x2F;&#x2F; 将获取信息打印</span><br><span class="line">      console.log(evt.data)</span><br><span class="line">      var msg &#x3D;JSON.parse(evt.data) </span><br><span class="line">      this.Time.push(msg.Time)</span><br><span class="line">      this.NewZealand.push(msg.NewZealand)</span><br><span class="line">      this.Australia.push(msg.Australia)</span><br><span class="line">      this.USA.push(msg.USA) </span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    ws.onerror &#x3D; (e)&#x3D;&gt;&#123;</span><br><span class="line">      console.log(&#39;错误信息&#39;,e)</span><br><span class="line">      &#x2F;&#x2F; this.websocketinit()</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 捕获断开连接</span><br><span class="line">    ws.onclose &#x3D; function () &#123;</span><br><span class="line">      console.log(&#39;链接已关闭&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>集合的用法和适用场景</title>
      <link href="2019/09/12/%E9%9B%86%E5%90%88(set)%E7%9A%84%E7%94%A8%E6%B3%95%E5%92%8C%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
      <url>2019/09/12/%E9%9B%86%E5%90%88(set)%E7%9A%84%E7%94%A8%E6%B3%95%E5%92%8C%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/</url>
      
        <content type="html"><![CDATA[<h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><p>集合（set）是一个无序的不重复元素序列。一般用于去重。<br>当元素的顺序性没有唯一性重要的时候，使用到SET去重</p><p>集合又分为可变集合和不可变集合</p><p>可变集合(set)：通过add等方法可以动态修改set中的内容</p><p>不可变集合(frozenset)：顾名思义，他的元素是不可变的</p><blockquote><p>frozenset()是一个函数，会返回一个冻结的集合，冻结后集合不能再添加或删除任何元素。</p></blockquote><h4 id="特点"><a href="#特点" class="headerlink" title="特点:"></a>特点:</h4><ol><li>不同元素组成（元素不能重复）</li><li>无序（集合元素的顺序和定义、添加的顺序不一致）</li><li>集合中的元素必须是不可变类型</li></ol><h4 id="底层实现"><a href="#底层实现" class="headerlink" title="底层实现"></a>底层实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 集合SET去重操作原理: 必须要有另外一个容器作比对，</span></span><br><span class="line"><span class="comment"># 比如每样鱼我要来一条，那么我旁边就需要有一个新的鱼缸，然后把挑选出来的鱼放进新鱼缸中，捞第二条的时候用眼睛和第一条作比对</span></span><br><span class="line"></span><br><span class="line">l = [<span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>]</span><br><span class="line">mylist = []</span><br><span class="line"></span><br><span class="line">[mylist.append(i) <span class="keyword">for</span> i <span class="keyword">in</span> l <span class="keyword">if</span> <span class="keyword">not</span> i <span class="keyword">in</span> mylist]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mylist)</span><br></pre></td></tr></table></figure><p>延伸一下append的底层原理：</p><blockquote><p>append其实是用到了队列,先进先出的概念</p><p>跟append一起的还有insert，两个的差别在于一个从头部插入，一个从尾部插入</p></blockquote><h4 id="集合的创建："><a href="#集合的创建：" class="headerlink" title="集合的创建："></a>集合的创建：</h4><p>可以使用大括号 { } 或者 set() 函数创建集合<br><br><strong>注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建集合</span></span><br><span class="line">parame = &#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(parame))</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">a = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">set</span>(a))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建空集合</span></span><br><span class="line">myset = <span class="built_in">set</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(myset))</span><br></pre></td></tr></table></figure><h4 id="集合常用方法"><a href="#集合常用方法" class="headerlink" title="集合常用方法"></a>集合常用方法</h4><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-add.html">add()</a></td><td align="left">为集合添加元素</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-clear.html">clear()</a></td><td align="left">移除集合中的所有元素</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-copy.html">copy()</a></td><td align="left">拷贝一个集合</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-difference.html">difference()</a></td><td align="left">返回多个集合的差集</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-difference_update.html">difference_update()</a></td><td align="left">移除集合中的元素，该元素在指定的集合也存在。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-discard.html">discard()</a></td><td align="left">删除集合中指定的元素</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-intersection.html">intersection()</a></td><td align="left">返回集合的交集</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-intersection_update.html">intersection_update()</a></td><td align="left">返回集合的交集。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-isdisjoint.html">isdisjoint()</a></td><td align="left">判断两个集合是否包含相同的元素，如果没有返回 True，否则返回 False。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-issubset.html">issubset()</a></td><td align="left">判断指定集合是否为该方法参数集合的子集。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-issuperset.html">issuperset()</a></td><td align="left">判断该方法的参数集合是否为指定集合的子集</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-pop.html">pop()</a></td><td align="left">随机移除元素</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-remove.html">remove()</a></td><td align="left">移除指定元素</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-symmetric_difference.html">symmetric_difference()</a></td><td align="left">返回两个集合中不重复的元素集合。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-symmetric_difference_update.html">symmetric_difference_update()</a></td><td align="left">移除当前集合中在另外一个指定集合相同的元素，并将另外一个指定集合中不同的元素插入到当前集合中。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-union.html">union()</a></td><td align="left">返回两个集合的并集</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-update.html">update()</a></td><td align="left">给集合添加元素</td></tr></tbody></table><h5 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 向一个空集合中添加元素</span></span><br><span class="line">myset = <span class="built_in">set</span>()</span><br><span class="line">myset.add(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(myset)</span><br><span class="line"></span><br><span class="line"><span class="comment"># update可以添加多个参数，可以是列表，元组，字典等，参数用逗号隔开</span></span><br><span class="line">myset = <span class="built_in">set</span>()</span><br><span class="line">myset.update(<span class="string">&#x27;hello&#x27;</span>,[<span class="number">1</span>,<span class="number">2</span>],&#123;<span class="number">3</span>:<span class="number">4</span>&#125;,(<span class="number">5</span>,<span class="number">6</span>))</span><br><span class="line"><span class="built_in">print</span>(myset)</span><br></pre></td></tr></table></figure><h5 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 随机删除一个元素  pop</span></span><br><span class="line">parame = &#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">parame.pop()</span><br><span class="line"><span class="built_in">print</span>(parame)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除指定元素 remove,元素不存在报错</span></span><br><span class="line">myset = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">myset.remove(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(myset)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除指定元素 discard,元素不存在不会报错</span></span><br><span class="line">myset = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">myset.discard(<span class="number">7</span>)</span><br><span class="line"><span class="built_in">print</span>(myset)</span><br></pre></td></tr></table></figure><h4 id="集合的运算符"><a href="#集合的运算符" class="headerlink" title="集合的运算符"></a>集合的运算符</h4><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><strong>-</strong></td><td align="left">集合a中包含而集合b中不包含的元素</td></tr><tr><td align="left">&#124;</td><td align="left">集合a或b中包含的所有元素</td></tr><tr><td align="left">&amp;</td><td align="left">集合a和b中都包含了的元素</td></tr><tr><td align="left">^</td><td align="left">不同时包含于a和b的元素</td></tr></tbody></table><h5 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">set</span>(<span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line">b = <span class="built_in">set</span>(<span class="string">&#x27;456789&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="集合a中包含而集合b中不包含的元素"><a href="#集合a中包含而集合b中不包含的元素" class="headerlink" title="集合a中包含而集合b中不包含的元素"></a>集合a中包含而集合b中不包含的元素</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(a - b)</span><br><span class="line"><span class="comment"># &#123;&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h5 id="集合a或b中包含的所有元素"><a href="#集合a或b中包含的所有元素" class="headerlink" title="集合a或b中包含的所有元素"></a>集合a或b中包含的所有元素</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(a | b)</span><br><span class="line"><span class="comment"># &#123;&#x27;1&#x27;, &#x27;4&#x27;, &#x27;5&#x27;, &#x27;2&#x27;, &#x27;8&#x27;, &#x27;3&#x27;, &#x27;6&#x27;, &#x27;7&#x27;, &#x27;9&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h5 id="集合a和b中都包含了的元素"><a href="#集合a和b中都包含了的元素" class="headerlink" title="集合a和b中都包含了的元素"></a>集合a和b中都包含了的元素</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(a &amp; b)</span><br><span class="line"><span class="comment"># &#123;&#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h5 id="不同时包含于a和b的元素"><a href="#不同时包含于a和b的元素" class="headerlink" title="不同时包含于a和b的元素"></a>不同时包含于a和b的元素</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(a ^ b)</span><br><span class="line"><span class="comment"># &#123;&#x27;8&#x27;, &#x27;3&#x27;, &#x27;7&#x27;, &#x27;9&#x27;, &#x27;1&#x27;, &#x27;2&#x27;&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 类型 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker部署项目</title>
      <link href="2019/09/03/Docker%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/"/>
      <url>2019/09/03/Docker%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="云主机-centOS7-中Docker容器式部署前后端分离项目Django-Vue-js"><a href="#云主机-centOS7-中Docker容器式部署前后端分离项目Django-Vue-js" class="headerlink" title="云主机 centOS7 中Docker容器式部署前后端分离项目Django+Vue.js"></a>云主机 centOS7 中Docker容器式部署前后端分离项目Django+Vue.js</h3><h4 id="前期准备："><a href="#前期准备：" class="headerlink" title="前期准备："></a>前期准备：</h4><ul><li><p><strong>Docker安装Docker - CentOS</strong></p><p>Docker 软件包和依赖包已经包含在默认的 CentOS-Extras 软件源里，安装命令如下</p><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install docker</span><br></pre></td></tr></table></figure></blockquote></li><li><p>本地安装软件FileZilla Client，并链接云主机，方便上传文件</p><p>安装教程：<a href="https://jingyan.baidu.com/article/e6c8503c6aa1a2e54f1a18a4.html">https://jingyan.baidu.com/article/e6c8503c6aa1a2e54f1a18a4.html</a></p><p>链接方法：如下图</p><p><img src="https://i.loli.net/2021/03/29/C6nJdrgIHf1ZqeR.png" alt="FileZilla Clien使用方法"></p></li></ul><h4 id="部署后端Django："><a href="#部署后端Django：" class="headerlink" title="部署后端Django："></a>部署后端Django：</h4><ul><li> <strong>在宿主机安装gunicorn，容器内我们用异步的方式来启动Django</strong></li></ul><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install gunicorn gevent</span><br></pre></td></tr></table></figure></blockquote><ul><li><p><strong>接下来在Django项目中配置settings.py对应的应用</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Application definition</span></span><br><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;corsheaders&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;rest_framework&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;gunicorn&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;dwebsocket&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;myapp&#x27;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p> <strong>然后在Django项目的根目录编写gunicorn的配置文件：gunicorn.conf.py</strong></p></li></ul>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line">bind = <span class="string">&quot;0.0.0.0:8000&quot;</span>   <span class="comment">#绑定的ip与端口</span></span><br><span class="line">workers = <span class="number">1</span>                <span class="comment">#进程数</span></span><br></pre></td></tr></table></figure><p>  <em><strong>注意，ip必须是0.0.0.0，不要写成127.0.0.1,否则外部环境会访问不到容器内的服务</strong></em></p><ul><li><p><strong>接下来在项目的根目录编写好依赖列表：requirements.txt</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Django==<span class="number">2.0</span><span class="number">.4</span></span><br><span class="line">django-cors-headers==<span class="number">2.5</span><span class="number">.3</span></span><br><span class="line">djangorestframework==<span class="number">3.9</span><span class="number">.3</span></span><br><span class="line">celery==<span class="number">4.4</span><span class="number">.2</span></span><br><span class="line">dwebsocket==<span class="number">0.5</span><span class="number">.12</span></span><br><span class="line">redis==<span class="number">3.3</span><span class="number">.11</span></span><br><span class="line">pymongo==<span class="number">3.8</span><span class="number">.0</span></span><br><span class="line">PyMySQL</span><br><span class="line">Pillow</span><br><span class="line">pyjwt</span><br><span class="line">pycryptodome</span><br><span class="line">selenium</span><br><span class="line">qiniu</span><br><span class="line">gunicorn</span><br><span class="line">gevent</span><br></pre></td></tr></table></figure><p><em><strong>这里需要注意的是，某些依赖的库最好用==标注出小版本，因为一会在容器内通过pip安装的时候，系统有可能会自动帮你安装最新版导致一些依赖报错</strong></em></p></li><li><p><strong>然后，在根目录编写Dockerfile文件</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">FROM python:<span class="number">3.7</span></span><br><span class="line">WORKDIR /Project/mydjango</span><br><span class="line"></span><br><span class="line">COPY requirements.txt ./</span><br><span class="line">RUN pip install -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"></span><br><span class="line">COPY . .</span><br><span class="line">ENV LANG C.UTF-<span class="number">8</span></span><br><span class="line"></span><br><span class="line">CMD [<span class="string">&quot;gunicorn&quot;</span>, <span class="string">&quot;mydjango.wsgi:application&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;./gunicorn.conf.py&quot;</span>]</span><br></pre></td></tr></table></figure></li><li><p><strong>本地文件上传到云主机，如上述方法，利用FileZilla Client把项目上传到对应目录</strong><br/><br/></p></li></ul><h3 id="好了，到这里我们本地对Django的操作基本就完事了"><a href="#好了，到这里我们本地对Django的操作基本就完事了" class="headerlink" title="好了，到这里我们本地对Django的操作基本就完事了"></a>好了，到这里我们本地对Django的操作基本就完事了</h3><h4 id="接下来在云主机命令行操作："><a href="#接下来在云主机命令行操作：" class="headerlink" title="接下来在云主机命令行操作："></a>接下来在云主机命令行操作：</h4><ul><li><p>运行命令对项目进行打包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t &#x27;mydjango&#x27; .</span><br></pre></td></tr></table></figure><p><em><strong>第一次打包编译的时候，可能时间会长一点，耐心等一会就可以了，如果中途遇到网络错误导致的失败，反复执行打包命令即可</strong></em></p><p>效果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@iz2ze9ov0mfw2tdc28w8o8z mydjango]# docker build -t &#x27;mydjango&#x27; .</span><br><span class="line">Sending build context to Docker daemon  12.71MB</span><br><span class="line">Step 1/7 : FROM python:3.7</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> ca194d6afe58</span></span><br><span class="line">Step 2/7 : WORKDIR /Project/mydjango</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Using cache</span></span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 4878c4a91caa</span></span><br><span class="line">Step 3/7 : COPY requirements.txt ./</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 1c2c9840b5db</span></span><br><span class="line">Step 4/7 : RUN pip install -r requirements.txt -i</span><br><span class="line"><span class="meta">---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 26b5be4ddfcc</span></span><br><span class="line">Looking in indexes: https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"><span class="meta">#</span><span class="bash"> 中间为下载过程，我这里就省略了</span></span><br><span class="line">https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 8775633a15e8</span></span><br><span class="line">Step 5/7 : COPY . .</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 50cad25dd1e6</span></span><br><span class="line">Step 6/7 : ENV LANG C.UTF-8</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 54d1f78c4e5e</span></span><br><span class="line">Removing intermediate container 54d1f78c4e5e</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 5dc91e0dc5d5</span></span><br><span class="line">Step 7/7 : CMD [&quot;gunicorn&quot;, &quot;mydjango.wsgi:application&quot;,&quot;-c&quot;,&quot;./gunicorn.conf.py&quot;]</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 496b7db576b2</span></span><br><span class="line">Removing intermediate container 496b7db576b2</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 3f65a3c94c16</span></span><br><span class="line">Successfully built 3f65a3c94c16</span><br><span class="line">Successfully tagged mydjango:latest</span><br></pre></td></tr></table></figure></li><li><p>此时运行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p>可以看到编译好的镜像大概有1g左右：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@iz2ze9ov0mfw2tdc28w8o8z ~]# docker images</span><br><span class="line">REPOSITORY      TAG        IMAGE ID        CREATED             SIZE</span><br><span class="line">mydjango      latest     3f65a3c94c16   About an hour ago     1.15GB</span><br></pre></td></tr></table></figure></li><li><p> 随后启动镜像服务：</p></li></ul>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --rm -p 5000:8000 mydjango</span><br></pre></td></tr></table></figure><p><strong>这里我们用端口映射技术将宿主机的5000端口映射到容器内的8000端口，访问Django服务，http://云主机ip:5000</strong></p><p>效果如下：</p><p><img src="https://i.loli.net/2021/03/29/aZnHzFokrL13Om9.png" alt="运行效果"></p><h3 id="perfect！后端搞定，接下来轮到我们的前端服务vue-js了"><a href="#perfect！后端搞定，接下来轮到我们的前端服务vue-js了" class="headerlink" title="perfect！后端搞定，接下来轮到我们的前端服务vue.js了"></a>perfect！后端搞定，接下来轮到我们的前端服务vue.js了</h3><ul><li><p>首先打开vue项目的打包配置文件config/index.js:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">build: &#123;</span><br><span class="line">    &#x2F;&#x2F; Template for index.html</span><br><span class="line">    index: path.resolve(__dirname, &#39;..&#x2F;dist&#x2F;index.html&#39;),</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Paths</span><br><span class="line">    assetsRoot: path.resolve(__dirname, &#39;..&#x2F;dist&#39;),</span><br><span class="line">    assetsSubDirectory: &#39;static&#39;,</span><br><span class="line">    assetsPublicPath: &#39;.&#x2F;&#39;,</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * Source Maps</span><br><span class="line">     *&#x2F;</span><br><span class="line"></span><br><span class="line">    productionSourceMap: true,</span><br><span class="line">    &#x2F;&#x2F; https:&#x2F;&#x2F;webpack.js.org&#x2F;configuration&#x2F;devtool&#x2F;#production</span><br><span class="line">    devtool: &#39;#source-map&#39;,</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Gzip off by default as many popular static hosts such as</span><br><span class="line">    &#x2F;&#x2F; Surge or Netlify already gzip all static assets for you.</span><br><span class="line">    &#x2F;&#x2F; Before setting to &#96;true&#96;, make sure to:</span><br><span class="line">    &#x2F;&#x2F; npm install --save-dev compression-webpack-plugin</span><br><span class="line">    productionGzip: false,</span><br><span class="line">    productionGzipExtensions: [&#39;js&#39;, &#39;css&#39;],</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Run the build command with an extra argument to</span><br><span class="line">    &#x2F;&#x2F; View the bundle analyzer report after build finishes:</span><br><span class="line">    &#x2F;&#x2F; &#96;npm run build --report&#96;</span><br><span class="line">    &#x2F;&#x2F; Set to &#96;true&#96; or &#96;false&#96; to always turn it on or off</span><br><span class="line">    bundleAnalyzerReport: process.env.npm_config_report</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>将打包目录改成相对路径，同时注意路由的配置，<em>如果曾经修改为history模式记得改回hash</em></strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export default new Router(&#123;</span><br><span class="line">  routes:routes,</span><br><span class="line">  &#x2F;&#x2F;mode:&#39;history&#39;   &#x2F;*hash*&#x2F;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><strong>接下来，在vue的项目根目录下编写Dockerfile</strong>：</p><p><em><strong>这里我们选择体积更小的alpine镜像。</strong></em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">FROM node:lts-alpine</span><br><span class="line"></span><br><span class="line"># install simple http server for serving static content</span><br><span class="line">RUN npm install -g http-server</span><br><span class="line"></span><br><span class="line"># make the &#39;app&#39; folder the current working directory</span><br><span class="line">WORKDIR &#x2F;app</span><br><span class="line"></span><br><span class="line"># copy both &#39;package.json&#39; and &#39;package-lock.json&#39; (if available)</span><br><span class="line">COPY package*.json .&#x2F;</span><br><span class="line"></span><br><span class="line"># install project dependencies</span><br><span class="line">RUN npm install</span><br><span class="line"></span><br><span class="line"># copy project files and folders to the current working directory (i.e. &#39;app&#39; folder)</span><br><span class="line">COPY . .</span><br><span class="line"></span><br><span class="line"># build app for production with minification</span><br><span class="line">RUN npm run build</span><br><span class="line"></span><br><span class="line">EXPOSE 8080</span><br><span class="line">CMD [ &quot;http-server&quot;, &quot;dist&quot; ]</span><br></pre></td></tr></table></figure></li><li><p><strong>准备完毕，接下来将vue项目上传到云主机(如上述上传django项目方法一样)</strong></p></li></ul><h3 id="同Django一样，vue项目的本地操作也完事了、"><a href="#同Django一样，vue项目的本地操作也完事了、" class="headerlink" title="同Django一样，vue项目的本地操作也完事了、"></a>同Django一样，vue项目的本地操作也完事了、</h3><h4 id="接下来在云主机命令行操作：-1"><a href="#接下来在云主机命令行操作：-1" class="headerlink" title="接下来在云主机命令行操作："></a>接下来在云主机命令行操作：</h4><ul><li> <strong>进入项目的根目录，执行打包命令</strong></li></ul>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t myvue .</span><br></pre></td></tr></table></figure><p>  <em><strong>系统会自动根据脚本进行安装依赖，第一次也需要等待一段时间。</strong></em></p><ul><li><p>打包完成后，执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure></li><li><p>可以看到前端镜像的体积要小一点：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@iz2ze9ov0mfw2tdc28w8o8z mydjango]# docker images</span><br><span class="line">REPOSITORY             TAG          IMAGE ID       CREATED                 SIZE</span><br><span class="line">mydjango               latest       3f65a3c94c16   About an hour ago       1.15GB</span><br><span class="line">myvue                  latest       5389cd4360e1   About an hour ago       416MB</span><br></pre></td></tr></table></figure></li><li><p> 运行前端服务：</p></li></ul>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --rm -p 8081:8080 myvue</span><br></pre></td></tr></table></figure><p>  <em><strong>同样使用端口映射，这次宿主机使用8081，当然了，如果需要可以根据喜好进行修改。</strong></em></p><ul><li><p>访问Vue.js服务，http://云主机ip:8081</p><p><img src="https://i.loli.net/2021/03/29/acvedNxjuw6iAbg.png" alt="运行效果.png"></p></li></ul><h4 id="至此，通过Docker的容器技术，我们就将前后端两大服务都分别部署好了！"><a href="#至此，通过Docker的容器技术，我们就将前后端两大服务都分别部署好了！" class="headerlink" title="至此，通过Docker的容器技术，我们就将前后端两大服务都分别部署好了！"></a>至此，通过Docker的容器技术，我们就将前后端两大服务都分别部署好了！</h4><h3 id="好啦，今天的分享就到这里啦，希望可以给大家带来帮助！！！"><a href="#好啦，今天的分享就到这里啦，希望可以给大家带来帮助！！！" class="headerlink" title="好啦，今天的分享就到这里啦，希望可以给大家带来帮助！！！"></a>好啦，今天的分享就到这里啦，希望可以给大家带来帮助！！！</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python中常见的数据类型</title>
      <link href="2019/08/20/Python%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>2019/08/20/Python%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>Python基本数据类型一般分为：<strong>数字</strong>、<strong>字符串</strong>、<strong>列表</strong>、<strong>元组</strong>、<strong>字典</strong>、<strong>集合</strong>（可变集合和不可变集合）这六种基本数据类型，</p><p>其中 数字、字符串、元祖和可变集合为不可变类型，列表、字典和不可变集合为可变类型。</p><p>下面我们来详细的介绍一下他们：</p><h3 id="数字："><a href="#数字：" class="headerlink" title="数字："></a>数字：</h3><blockquote><p>数字类型是不可更改的对象。对变量改变数字值就是生成/创建新的对象。Python支持多种数字类型：</p><p>整型(标准整型和长整型(Python2.7及之前的有这种类型))、布尔型、双精度浮点型、十进制浮点型、复数。</p></blockquote><p><strong>标准整型</strong></p><blockquote><p>int，标准整型，在大多数32位机器上标准整型取值范围是-2^31到2^31-1，也就是-2147483648~2147483647，如果在64位机器使用64位编译器，那么这个系统的标准整型将是64位。</p></blockquote><p><strong>布尔型</strong></p><blockquote><p>bool，从Python2.3开始Python中添加了布尔类型。布尔类型有两种True和False。对于没有__nozero__方法的对象默认是True。</p><p>对于值为0的数字、空集（空列表、空元组、空字典等）在Python中的布尔类型中都是False。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; bool(1)</span></span><br><span class="line">True</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; bool(<span class="string">&#x27;a&#x27;</span>)</span></span><br><span class="line">True</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; bool(0)</span></span><br><span class="line">False</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; bool(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line">False</span><br></pre></td></tr></table></figure><p><strong>浮点型</strong></p><blockquote><p>​        float，每个浮点型占8个字节（64位），完全遵守IEEE754号规范（52M/11E/1S）,其中52个位用于表示底，11个位用于表示指数（可表示的范围大约是±10**308.25），剩下的一个位表示符号。这看上去相当完美，然而，实际精度依赖于机器架构和创建Python解释器的编译器。</p><p>​        浮点型值通常都有一个小数点和一个可选的后缀e（大写或小写，表示科学计数法）。在e和指数之间可以用正（+）或负（-）表示指数的正负（正数的话可以省略符号）。更多内容，请点击<a href="https://www.py.cn/">python学习网</a>。</p></blockquote><p>以上是Python核心编程的对浮点型(双精度浮点型)的说明。经过Python实测浮点型默认长度是24字节如果超出这个范围会自动</p><p><strong>复数类型</strong></p><blockquote><p>complex，在复数中虚数不能单独存在，它们总是和一个值为0.0的实数部分一起来构成一个复数。复数由实数部分和虚数部分构成。</p><p>表示虚数的语法：real+imagj。</p><p>实数部分和虚数部分都是浮点型。</p><p>虚数部分必须有后缀j或J。</p></blockquote><h3 id="字符串："><a href="#字符串：" class="headerlink" title="字符串："></a>字符串：</h3><blockquote><p>​        <strong>字符串</strong>(string)是<em><strong>不可变类型</strong></em>，就是说改变一个字符串的元素需要新建一个新的字符串。字符串是由独立的字符组成的，并且这些字符可以通过切片操作顺序地访问。<em><strong>里面通过在引号间包含字符的方式创建字符串，单引号和双引号的作用是相同的。</strong></em></p><p>​        Python用“原始字符串”操作符来创建直接量字符串，所以再做区分就没什么意义了。其他的语言，比如C语言里面用单引号来标示字符，双引号标示字符串，而在Python里面没有字符这个类型。这可能是双引号和单引号在Python里面被视作一样的另一个原因。</p><p>​        Python实际上有三类字符串。通常意义的字符串（str） 和Unicode字符串（unicode） 实际上都是抽象类basestring的子类。这个basestring是不能实例化的。</p></blockquote><h4 id="字符串常见的操作方法："><a href="#字符串常见的操作方法：" class="headerlink" title="字符串常见的操作方法："></a>字符串常见的操作方法：</h4><table><thead><tr><th>操作方法</th><th>作用</th><th>案例</th></tr></thead><tbody><tr><td>index()</td><td>查找字符串中第一次出现的子字符串的位置；可以规定字符串的索引查找范围[star,end)。若无则会报错</td><td>my_str=”hello word hello python”<br/>ret_01=my_str.index(“lo”,5,17)<br/>print(ret_01)</td></tr><tr><td>find()</td><td>找字符串中指定的子字符串第一次出现的位置（find默认从左侧开始查找，rfind从右侧开始查找），可以规定字符串的索引查找范围。若无则返回 -1</td><td>str.find(sub,start,end) -&gt; int 返回整数<br />- sub —要索引的子字符串。<br/>- start —索引的起始位置。默认值为0。<br/>- end —索引的结束位置。默认值为字符串长度len(str)。</td></tr><tr><td>count()</td><td>查找指定字符在字符串中出现的次数</td><td>my_str=”hello word hello python”<br/>ret_06=my_str.count(“lo”)<br/>print(ret_06)</td></tr><tr><td>replace()</td><td>替换字符串中指定字符</td><td>replace(“被替换的字符”,”替换成的字符”，替换次数)   替换次数不写默认全部替换</td></tr><tr><td>split()</td><td>拆分字符串。 通过指定分隔符sep对字符串进行分割，并保存分割后的字符串列表。</td><td>my_str=”hello word hello python”<br/>ret_03=my_str.split(“ “)<br/>print(ret_03)</td></tr><tr><td>capitalize()</td><td>将字符串的第一个字母变成大写，其余字母变为小写。</td><td>my_str=”hello word hello python”<br/>ret_04=my_str.capitalize()<br/>print(ret_04)</td></tr><tr><td>title()</td><td>返回一个满足标题格式的字符串。即所有英文单词首字母大写，其余英文字母小写</td><td>my_str=”hello word hello python”<br/>ret_05=my_str.title()<br/>print(ret_05)</td></tr><tr><td>startswith()</td><td>判断字符串是否以指定字符或子字符串开头</td><td>str.endswith(“suffix”, start, end) 或str[start,end].<br />注意：空字符的情况。返回值通常为True</td></tr><tr><td>endswith()</td><td>用于判断字符串中某段字符串是否以指定字符或子字符串结尾。</td><td>str.endswith(“suffix”)</td></tr><tr><td>isalnum()</td><td>检测字符串是否由字母和数字组成。str中至少有一个字符且所有字符都是字母或数字则返回 True,否则返回 False</td><td>str.isalnum() -&gt; bool 返回值为布尔类型（True,False）</td></tr><tr><td>isalpha()</td><td>检测字符串是否只由字母组成。字符串中至少有一个字符且<br/>所有字符都是字母则返回 True,否则返回 False。</td><td>str.isalpha() -&gt; bool 返回值为布尔类型（True,False）</td></tr><tr><td>isdigit()</td><td>检测字符串是否只由数字组成.字符串中至少有一个字符且所有字符都是数字则返回 True,否则返回 False</td><td>str.isdigit() -&gt; bool 返回值为布尔类型（True,False）<br />注：能判断“①”，不能判断中文数字。但 isnumeric() 函数可以。</td></tr><tr><td>islower()</td><td>检测字符串中的字母是否全由小写字母组成。（字符串中可包含非字母字符）字符串中包含至少一个区分大小写的字符，且所有这些区分大小写的字符都是小写，则返回 True，否则返回 False。</td><td>str.islower() -&gt; bool 返回值为布尔类型（True,False）</td></tr><tr><td>isupper()</td><td>检测字符串中的字母是否全由大写字母组成。（字符串中可包含非字母字符）。字符串中包含至少一个区分大小写的字符，且所有这些区分大小写的字符都是大写，则返回 True，否则返回 False。</td><td>str.isupper() -&gt; bool 返回值为布尔类型（True,False）</td></tr><tr><td>strip()  lstrip()  rstrip()</td><td>该函数的作用是去除字符串开头和结尾处指定的字符，不会去除字符串中间对应的字符<br />lstrip() 方法用于截掉字符串左边的空格或指定字符。<br />删除 str 字符串末尾的指定字符（默认为空格</td><td>str.strip(chars)<br />参数：chars – 要去除的字符 默认为空格或换行符</td></tr><tr><td>join()</td><td>将iterable变量的每一个元素后增加一个str字符串</td><td>sep.join(iterable)<br />sep——分隔符。可以为空。<br/>iterable（可迭代对象）—— 要连接的变量 ，可以是 字符串，元组，字典，列表等。</td></tr><tr><td>upper()</td><td>将字符串中所有小写字母转换成大写字母</td><td>my_str=”hello word hello python”<br/>ret_06=my_str.upper()<br/>print(ret_06)</td></tr><tr><td>center()</td><td>返回一个长度为width,两边用fillchar(单字符)填充的字符串，即字符串str居中，两边用fillchar填充。若字符串的长度大于width,则直接返回字符串str</td><td>width —— 指定字符串的输出长度。<br />fillchar—— 将要填充的单字符，默认为空格</td></tr><tr><td>just()   ljust()  rjust()</td><td>返回一个原字符串左对齐（默认）,并使用fillchar填充(默认为空格)至指定长度的新字符串。如果指定的长度小于原字符串的长度则返回原字符串。ljust()左对齐，rjust()右对齐</td><td></td></tr><tr><td>issapce()</td><td>检测字符串是否只由空格组成。若字符串中只包含空格，则返回 True，否则返回 False</td><td>str.isspace() -&gt; bool 返回值为布尔类型（True,False）</td></tr><tr><td>istitle()</td><td>检测判断字符串中所有单词的首字母是否为大写，且其它字母是否为小写，字符串中可以存在其它非字母的字符。若字符串中所有单词的首字母为大写，且其它字母为小写，则返回 True，否则返回 False.</td><td>str.istitle() -&gt; bool 返回值为布尔类型（True,False）</td></tr></tbody></table><p><strong>注意</strong>：</p><ul><li>find和index都可以查找指定字符字符串的下标，不同点为find查找的字符不存在时输出-1，而index直接报错</li></ul><h3 id="列表："><a href="#列表：" class="headerlink" title="列表："></a>列表：</h3><h4 id="认识列表"><a href="#认识列表" class="headerlink" title="认识列表:"></a>认识列表:</h4><p>names = [“Alise”, 123, None, [1, 2, 3], {“name”: “张珊”}, 999, 110]</p><blockquote><p>我们将由中括号包裹的代码块称作列表，为了方便对裂变进行操作，我们将列表赋值给了变量names。注意，在特定情况下，变量需要先声明。变量中的每一个数据称作元素，元素可以为任意类型。</p></blockquote><h4 id="列表的常见操作："><a href="#列表的常见操作：" class="headerlink" title="列表的常见操作："></a>列表的常见操作：</h4><table><thead><tr><th>操作方法</th><th>作用</th><th>案例</th></tr></thead><tbody><tr><td>append()</td><td>用于在列表末尾追加新的对象</td><td>a = [1, 2, 3]<br/>a.append(4)<br/><br/>result: [1, 2, 3, 4]</td></tr><tr><td>insert()</td><td>方法用于将对象插入到列表中</td><td>a = [1, 2, 3]<br/>a.insert(0, ‘aa’)<br/><br/>result: [‘aa’, 1, 2,3]</td></tr><tr><td>extend()</td><td>方法可以在列表的末尾一次性追加另一个序列中的多个值</td><td>a = [1, 2, 3]<br/>b = [4, 5, 6]<br/>a.extend(b)<br/><br/>result: [1, 2, 3, 4, 5, 6]</td></tr><tr><td>count()</td><td>方法统计某个元素在列表中出现的次数</td><td>a = [‘aa’, ‘bb’, ‘cc’, ‘aa’, ‘aa’]<br/>print(a.count(‘aa’))<br/><br/>result: 3</td></tr><tr><td>index()</td><td>函数用于从列表中找出某个值第一个匹配项的索引位置</td><td>a = [1, 2, 3, 1]<br/>print(a.index(1))<br/><br/>result: 0</td></tr><tr><td>in or not in</td><td>返回bool类型的结果 True 或者 False</td><td>list = [‘aa’, ‘bb’, ‘cc’, ‘aa’, ‘aa’]<br/> print(“a” in list)<br/> <em># True</em></td></tr><tr><td>pop()</td><td>方法会移除列表中的一个元素（默认是最后一个），并且返回该元素的值</td><td>a = [1, 2, 3]<br/>a.pop()<br/>result: [1, 2] <br/>a.pop(0)<br/>result: [2]</td></tr><tr><td>remove()</td><td>方法用于移除列表中某一个值的第一个匹配项</td><td>a = [‘aa’, ‘bb’, ‘cc’, ‘aa’]<br/>a.remove(‘aa’)<br/><br/>result: [‘bb’, ‘cc’, ‘aa’]</td></tr><tr><td>clear()</td><td>清除列表中所有的元素</td><td>list= [“aa”, “bb”, “cc”, “dd”, “ee”, “ff”]<br/>list.clear()<br/> print(list) <br/><em># 运行结果:[ ]</em></td></tr><tr><td>del()</td><td>删除整个列表</td><td>list= [“aa”, “bb”, “cc”, “dd”, “ee”, “ff”] <br/>del list<br/> print(list)  <em>#  报错 name ‘list’ is not defined</em></td></tr><tr><td>reverse()</td><td>方法将列表中的元素反向存放</td><td>a = [‘a’, ‘b’, ‘c’]<br/>a.reverse()<br/><br/>result: [‘c’, ‘b’, ‘a’]</td></tr><tr><td>enumerate()</td><td>函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中</td><td>li = [11, 22, 33]<br/>for k,v in enumerate(li, 1):<br/>   print(k, v)</td></tr><tr><td>len()</td><td>返回一个列表的长度</td><td>names = [“Alise”, 123, None, [1, 2, 3], {“name”: “张珊”}, 999, 110] <br/>print(len(names)) <br/><em># 7</em></td></tr><tr><td>sort()和sorted()</td><td>方法用于在原位置对列表进行排序，意外着改变原来的列表，让其中的元素按一定顺序排列</td><td># 对字母进行排序：<br/>nums = [“a”, “b”, “c”, “e”, “z”, “x”]<br/>nums.sort(reverse=True)  <br/>print(nums)  # [‘z’, ‘x’, ‘e’, ‘c’, ‘b’, ‘a’]<br/>#  [‘z’, ‘x’, ‘e’, ‘c’, ‘b’, ‘a’]<br/><br/># 对数字进行排序：<br/>nums = [3, 9, 15, 51, 75, 6, 1, 4, 45]<br/>nums.sort(reverse=True)<br/>print(nums) # [75, 51, 45, 15, 9, 6, 4, 3, 1]<br/></td></tr></tbody></table><p><strong>列表推导式</strong>（又称列表解析式）提供了一种简明扼要的方法来创建列表。</p><p>它的结构是在一个中括号里包含一个表达式，然后是一个for语句，然后是 0 个或多个 for 或者 if 语句。那个表达式可以是任意的，意思是你可以在列表中放入任意类型的对象。返回结果将是一个新的列表，在这个以 if 和 for 语句为上下文的表达式运行完成之后产生。</p><p>列表推导式的执行顺序：各语句之间是嵌套关系，左边第二个语句是最外层，依次往右进一层，左边第一条语句是最后一层</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[x*y <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>) <span class="keyword">if</span> x &gt; <span class="number">2</span> <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">4</span>) <span class="keyword">if</span> y &lt; <span class="number">3</span>]</span><br><span class="line"><span class="comment"># 他的执行顺序是：</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">if</span> x &gt; <span class="number">2</span></span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">4</span>)</span><br><span class="line">            <span class="keyword">if</span> y &lt; <span class="number">3</span></span><br><span class="line">                x*y</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ul><li>sort只可对列表进行操作，而sorted可对所有可迭代对象使用，且<strong>sort</strong> 和 <strong>sorted</strong> 都有两个参数 ，第一个参数:<strong>key=None</strong>默认为空,可以是自定义函数,系统函数,或者<strong>lambda匿名函数</strong>  ，第二个参数是<strong>reverse=Fals</strong> 默认为<strong>False</strong>表示不反转，即从小到大的顺序</li></ul><h3 id="元祖："><a href="#元祖：" class="headerlink" title="元祖："></a>元祖：</h3><blockquote><p>元组的定义由（）定义，相邻元素之间采用，进行分割，在形式上，可以称为不可变的列表</p><p>元组是<strong>不可变类型</strong>，无法对其中的元素进行单独的修改和增加</p></blockquote><h4 id="元祖的常见操作"><a href="#元祖的常见操作" class="headerlink" title="元祖的常见操作"></a>元祖的常见操作</h4><table><thead><tr><th>操作方法</th><th>作用</th><th>案例</th></tr></thead><tbody><tr><td>del</td><td>元组的删除(由于元祖不可变，所以这里是删除整个元祖)</td><td>tu1 = (‘123’, ‘元组’, [1, 2, 3], {‘name’: ‘zhou’, ‘age’: 18}) del tu1</td></tr><tr><td>count</td><td>查找的为某个元素在元组中出现的次数</td><td>tu = (11, 22, 33, 44, 55, 44, 33, 22, 11) <br/> print(tu.count(22))  <br/><br/><em># 输出结果</em> 2</td></tr><tr><td>index</td><td>查找的为元素的索引值，第一个参数代表需要查找的元素，第二个参数可以指定从哪个索引值开始查找</td><td>tu = (11, 22, 33, 44, 55, 44, 33, 22, 11)<br/>print(tu.index(44))<br/>print(tu.index(44, 4))<br/><br/># 输出结果<br/>3<br/>5</td></tr><tr><td>通过索引取值</td><td>通过切片的方式获取指定的元素，第一个参数为开始索引，第二个参数为结束索引，第三个参数为步长</td><td>tu = (11, 22, 33, 44, 55, 44, 33, 22, 11)<br/># 通过索引取出索引为3的值<br/>print(tu[3])<br/>print(tu[2:8:2])<br/><br/># 输出结果<br/>44<br/></td></tr></tbody></table><p><strong>修改元组元素</strong></p><p>虽然我们开始就说到元组无法进行单独的修改，但是我们可以对原组进行重新赋值，拼接等操作达到修改元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">tu = (<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">44</span>, <span class="number">33</span>, <span class="number">22</span>, <span class="number">11</span>)</span><br><span class="line"><span class="comment"># 给元组重新赋值</span></span><br><span class="line">tu = (<span class="number">77</span>, <span class="number">88</span>, <span class="number">99</span>)</span><br><span class="line"><span class="built_in">print</span>(tu)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用元组进行拼接得到新元祖，注意，拼接的类型一定要为元组格式</span></span><br><span class="line">tu1 = (<span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>)</span><br><span class="line">tu2 = (<span class="number">66</span>, <span class="number">77</span>, <span class="number">88</span>)</span><br><span class="line">tu1 = tu1 + tu2</span><br><span class="line"><span class="built_in">print</span>(tu1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">(<span class="number">77</span>, <span class="number">88</span>, <span class="number">99</span>)</span><br><span class="line">(<span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>, <span class="number">77</span>, <span class="number">88</span>)</span><br></pre></td></tr></table></figure><p><strong>元组的拆包</strong></p><p>在元组有多个元素的时候，我们可以进行元组拆包来分别得到元组的元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tu = (<span class="number">77</span>, <span class="number">88</span>, <span class="number">99</span>)</span><br><span class="line"><span class="comment"># 有几个元素就用几个变量接收</span></span><br><span class="line">a, b, c = tu</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">77</span></span><br><span class="line"><span class="number">88</span></span><br><span class="line"><span class="number">99</span></span><br></pre></td></tr></table></figure><p><strong>元组推导式</strong></p><p>元组推导式和我们的列表推导式是一样的，只需要修将列表的[]改为()就可以了，此处我们不做过多的演示，详细内容请看列表（list）的常用操作</p><h3 id="字典："><a href="#字典：" class="headerlink" title="字典："></a>字典：</h3><p><strong>字典的定义：</strong></p><p>​        <strong>字典</strong>是一种<strong>可变容器模型</strong>，且可存储任意类型对象。字典的每个键值 <strong>key=&gt;value</strong> 对用冒号 <strong>:</strong> 分割，每个键值对之间用逗号 <strong>,</strong> 分割，整个字典包括在花括号 <strong>{}</strong> 中 ,格式如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;key1 : value1, key2 : value2 &#125;</span><br></pre></td></tr></table></figure><p><strong>字典的常见操作：</strong></p><table><thead><tr><th>操作方法</th><th>格式</th></tr></thead><tbody><tr><td>查看元素</td><td>print(字典名[key值]) #获取不存在的key会发生异常 print(字典名.get(key值)) #获取到不存在的key不会发生异常</td></tr><tr><td>修改元素</td><td>字典名[key值] 赋予新的值即可<br />dict[key] = “runtu”</td></tr><tr><td>添加元素</td><td>字典名[key值] = “qiuqiu” #key值不存在<br />dict[key] = “qiuqiu”</td></tr><tr><td>删除元素</td><td>del 字典[key值]<br />del dict[key]</td></tr><tr><td>删除字典</td><td>del 字典名<br />del dict</td></tr><tr><td>清空字典</td><td>字典名.clear<br />dict.clear</td></tr><tr><td>测量键值对的长度或个数</td><td>len(字典名)<br />len(dict)</td></tr><tr><td>返回一个字典的所以key的列表</td><td>print(字典名.keys)<br />print(dict.keys)</td></tr><tr><td>返回一个包含字典所有value的列表</td><td>print(字典名.values)<br />print(dict.values)</td></tr><tr><td>返回一个包含所有（键，值）元组的列表</td><td>print(字典名.items())<br />print(dict.items())</td></tr><tr><td>.has_key查看key值是否在字典内，返回True(存在)，返回False(不存在)</td><td>字典名.has_key(key值)<br />dict.has_key(key)</td></tr></tbody></table><p><strong>字典的特性：</strong></p><p>字典值可以没有限制地取任何python对象，既可以是标准的对象，也可以是用户定义的，但键不行。</p><ol><li><p>不允许同一个键出现两次。创建时如果同一个键被赋值两次，后一个值会被记住，如下实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dict</span> = &#123;<span class="string">&#x27;Name&#x27;</span>: <span class="string">&#x27;Zara&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;Name&#x27;</span>: <span class="string">&#x27;Manni&#x27;</span>&#125; </span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;dict[&#x27;Name&#x27;]: &quot;</span>, <span class="built_in">dict</span>[<span class="string">&#x27;Name&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果：</span></span><br><span class="line"><span class="built_in">dict</span>[<span class="string">&#x27;Name&#x27;</span>]:  Manni</span><br></pre></td></tr></table></figure></li><li><p>键必须不可变，所以可以用数字，字符串或元组充当，所以用列表就不行，如下实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dict</span> = &#123;[<span class="string">&#x27;Name&#x27;</span>]: <span class="string">&#x27;Zara&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>: <span class="number">7</span>&#125; </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dict</span>)</span><br><span class="line"><span class="comment">#输出结果（报错信息）：</span></span><br><span class="line"><span class="built_in">dict</span> = &#123;[<span class="string">&#x27;Name&#x27;</span>]: <span class="string">&#x27;Zara&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>: <span class="number">7</span>&#125;</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: unhashable <span class="built_in">type</span>: <span class="string">&#x27;list&#x27;</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>Python字典包含了以下内置函数：</strong></p><table><thead><tr><th align="left">序号</th><th align="left">函数</th><th>描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">cmp(dict1, dict2)</td><td>比较两个字典元素。</td></tr><tr><td align="left">2</td><td align="left">len(dict)</td><td>计算字典元素个数，即键的总数。</td></tr><tr><td align="left">3</td><td align="left">str(dict)</td><td>输出字典可打印的字符串表示。</td></tr><tr><td align="left">4</td><td align="left">type(variable)</td><td>返回输入的变量类型，如果变量是字典就返回字典类型。</td></tr></tbody></table><p><strong>Python字典包含了以下内置方法：</strong></p><table><thead><tr><th align="left">序号</th><th align="left">函数</th><th>描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">dict.clear()</td><td>删除字典内所有元素</td></tr><tr><td align="left">2</td><td align="left">dict.copy()</td><td>返回一个字典的浅复制</td></tr><tr><td align="left">3</td><td align="left">dict.fromkeys(seq[, val])</td><td>创建一个新字典，以序列 seq 中元素做字典的键，val 为字典所有键对应的初始值</td></tr><tr><td align="left">4</td><td align="left">dict.get(key, default=None)</td><td>返回指定键的值，如果值不在字典中返回default值</td></tr><tr><td align="left">5</td><td align="left">dict.has_key(key)</td><td>如果键在字典dict里返回true，否则返回false</td></tr><tr><td align="left">6</td><td align="left">dict.items()</td><td>以列表返回可遍历的(键, 值) 元组数组</td></tr><tr><td align="left">7</td><td align="left">dict.keys()</td><td>以列表返回一个字典所有的键</td></tr><tr><td align="left">8</td><td align="left">dict.setdefault(key, default=None)</td><td>和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default</td></tr><tr><td align="left">9</td><td align="left">dict.update(dict2)</td><td>把字典dict2的键/值对更新到dict里</td></tr><tr><td align="left">10</td><td align="left">dict.values()</td><td>以列表返回字典中的所有值</td></tr><tr><td align="left">11</td><td align="left">pop(key[,default])</td><td>删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。</td></tr><tr><td align="left">12</td><td align="left">popitem()</td><td>返回并删除字典中的最后一对键和值。</td></tr></tbody></table><h3 id="集合："><a href="#集合：" class="headerlink" title="集合："></a>集合：</h3><p><strong>集合的定义：</strong></p><blockquote><p>集合（set）是一个无序的不重复元素序列 </p><p>可以使用大括号 { } 或者 set( ) 函数创建集合</p><p>创建一个空集合必须用 set( ) 而不是 { }，因为 { } 是用来创建一个空字典</p></blockquote><h5 id="集合去重底层实现"><a href="#集合去重底层实现" class="headerlink" title="集合去重底层实现"></a>集合去重底层实现</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 集合SET去重操作原理: 必须要有另外一个容器作比对，</span></span><br><span class="line"><span class="comment"># 比如每样鱼我要来一条，那么我旁边就需要有一个新的鱼缸，然后把挑选出来的鱼放进新鱼缸中，捞第二条的时候用眼睛和第一条作比对</span></span><br><span class="line"></span><br><span class="line">l = [<span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>]</span><br><span class="line">mylist = []</span><br><span class="line"></span><br><span class="line">[mylist.append(i) <span class="keyword">for</span> i <span class="keyword">in</span> l <span class="keyword">if</span> <span class="keyword">not</span> i <span class="keyword">in</span> mylist]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mylist)</span><br></pre></td></tr></table></figure><h5 id="延伸一下append的底层原理："><a href="#延伸一下append的底层原理：" class="headerlink" title="延伸一下append的底层原理："></a>延伸一下append的底层原理：</h5><blockquote><p>append其实是用到了队列,先进先出的概念</p><p>跟append一起的还有insert，两个的差别在于一个从头部插入，一个从尾部插入</p></blockquote><p><strong>集合的常见操作：</strong></p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>add</td><td>增加元素</td><td>a_set = {1, 2, 3, 4, 5}<br/>a_set.add(6)<br/>a_set.add(“a”)<br/>print(a_set)<br/>   {1, 2, 3, 4, 5, 6, ‘a’}</td></tr><tr><td>update</td><td>把要传入的元素拆分，作为个体传入到集合中</td><td>a_set = {1, 2, 3, 4, 5}<br/>b_set = {6, 7, 8, 9}<br/>a_set.update(b_set)<br/>print(a_set)<br/>  {1, 2, 3, 4, 5, 6, 7, 8, 9}</td></tr><tr><td>remove</td><td>删除集合中的元素 如果有，直接删除 如果没有 程序报错</td><td>c_set = {1, 2, 3, 4, 5, 6, 7, 8, 9}<br/>c_set.remove(8)<br/>print(c_set)<br/>  {1, 2, 3, 4, 5, 6, 7, 9}</td></tr><tr><td>pop</td><td>随机删除集合中的元素，如果set1没有元素程序报错</td><td>c_set = {1, 2, 3, 4, 5, 6, 7, 8, 9}<br/>c_set.pop()<br/>print(c_set)<br/>#{2, 3, 4, 5, 6, 7, 8, 9}</td></tr><tr><td>discard</td><td>如果元素存在 直接删除 如 果元素不存在 不做任何操作</td><td>c_set = {1, 2, 3, 4, 5, 6, 7, 8, 9}<br/>c_set.discard(5)<br/>print(c_set)<br/>#{1, 2, 3, 4, 6, 7, 8, 9}</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><p><strong>集合的交集和并集：</strong></p><table><thead><tr><th>方法</th><th>代码</th></tr></thead><tbody><tr><td>交集</td><td>set1 = {1, 2, 3, 4}<br/>set2 = {3, 4, 5, 6}<br/>new_set = set1 &amp; set2<br/>print(new_set)</td></tr><tr><td>并集</td><td>set1 = {1, 2, 3, 4}<br/><br/>set2 = {3, 4, 5, 6}<br/>new_set = set1 | set2<br/>print(new_set)</td></tr></tbody></table><p><strong>Python 集合的优势：</strong></p><p>由于集合中的元素不能出现多次，这使得集合在很大程度上能够高效地从列表或元组中删除重复值，并执行取并集、交集等常见的的数学操作</p><p><strong>注意：</strong></p><p>集合分为<strong>可变集合</strong>和<strong>不可变集合</strong>，</p><p>不可变集的一个主要的缺点是：由于它们是不可变的，这意味着你不能向其中添加元素或者删除其中的元素</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>栈</title>
      <link href="2019/07/12/%E6%A0%88/"/>
      <url>2019/07/12/%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是栈？"><a href="#什么是栈？" class="headerlink" title="什么是栈？"></a>什么是栈？</h3><p>栈（stack）又名堆栈，它是一种运算受限的线性表。限定仅在表尾进行插入和删除操作的线性表。<br>这一端被称为栈顶，相对地，把另一端称为栈底。向一个栈插入新元素又称作进栈、入栈或压栈，它是把新元素放到栈顶元素的上面，使之成为新的栈顶元素；<br>从一个栈删除元素又称作出栈或退栈，它是把栈顶元素删除掉，使其相邻的元素成为新的栈顶元素。</p><p>栈作为一种数据结构，是一种只能在一端进行插入和删除操作的特殊线性表。<br>它按照先进后出，后进先出的原则存储数据</p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>生活中的案例：<ul><li>现实生活中，我们都会看到一辆一辆的大货车，当我们需要用大货车运载货物时，我们假设这个大货车只有一个门，那么我们就会发现，往往我们先装进去的东西确是最后才卸下来，<br>而我们想要先搬下来的东西都会再最后才装车，这就是一个栈的实例，现在明白了吗？</li></ul></li><li>开发中的案例：<ul><li>将十进制的数转换为二进制的数<br>我们都知道，通过求余法，可以将十进制数转换为其他进制，比如要转为二进制，将十进制数除以2，记录余数，然后继续将商除以2，一直到商等于0为止，最后将余数倒着写数来就可以了。<h3 id="接下来我们用一小段代码来实现一下"><a href="#接下来我们用一小段代码来实现一下" class="headerlink" title="接下来我们用一小段代码来实现一下"></a>接下来我们用一小段代码来实现一下</h3>比如13的二进制，13首先除以2商6余1,1首先进栈，然后6除以2商3余0，第二个余数0进栈，接着3除以2，商1余1，第三个余数1进栈，继续1除以2商0余1，第四个余数1进栈。最后将四个余数出栈，就得到了13的二进制1101。<br>实现代码如下<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.lst = [<span class="literal">None</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>)]</span><br><span class="line">        self.top = -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.top == <span class="built_in">len</span>(self.lst) - <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;栈满了&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.top += <span class="number">1</span></span><br><span class="line">            self.lst[self.top] = data</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.top == -<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            data = self.lst[self.top]</span><br><span class="line">            self.top -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = Stack()</span><br><span class="line">data = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入要转换成二进制的数字： &quot;</span>))</span><br><span class="line"><span class="keyword">while</span> data != <span class="number">0</span>:</span><br><span class="line">    ys = data % <span class="number">2</span></span><br><span class="line">    s.push(ys)</span><br><span class="line">    data = data // <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> s.top != -<span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(s.pop(), end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="栈和队列的异同点"><a href="#栈和队列的异同点" class="headerlink" title="栈和队列的异同点"></a>栈和队列的异同点</h3><p>首先，栈（Stack）和队列（Queue）是两种操作受限的线性表。</p><ul><li><p><strong>栈与队列的相同点</strong>：</p><ul><li>都是线性结构。</li><li>插入操作都是限定在表尾进行。</li><li>都可以通过顺序结构和链式结构实现。</li><li>插入与删除的时间复杂度都是O（1），在空间复杂度上两者也一样。</li><li>多链栈和多链队列的管理模式可以相同。</li></ul></li><li><p><strong>栈与队列的不同点</strong>：</p><ul><li>删除数据元素的位置不同，栈的删除操作在表尾进行，队列的删除操作在表头进行。</li><li>应用场景不同；常见栈的应用场景包括括号问题的求解，表达式的转换和求值，函数调用和递归实现，深度优先搜索遍历等；常见的队列的应用场景包括计算机系统中各种资源的管理，消息缓冲器的管理和广度优先搜索遍历等。</li><li>顺序栈能够实现多栈空间共享，而顺序队列不能。</li></ul></li></ul><h3 id="好啦，今天的分享就到这里啦，希望可以给大家带来帮助！！！"><a href="#好啦，今天的分享就到这里啦，希望可以给大家带来帮助！！！" class="headerlink" title="好啦，今天的分享就到这里啦，希望可以给大家带来帮助！！！"></a>好啦，今天的分享就到这里啦，希望可以给大家带来帮助！！！</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB的使用</title>
      <link href="2019/06/25/MongoDB%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>2019/06/25/MongoDB%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p><strong>MongoDB安装方式</strong></p><p>将MongoDB服务下载下来 安装到自己的电脑</p><h5 id="MongoDB服务下载并安装"><a href="#MongoDB服务下载并安装" class="headerlink" title="MongoDB服务下载并安装"></a>MongoDB服务下载并安装</h5><p>进入<a href="https://www.mongodb.com/try/download/community">https://www.mongodb.com/try/download/community</a> 这个链接去下载，<br>下载完成后，会得到一个后缀为.msi的文件，双击进行安装即可<br><strong>注意</strong>：不去掉勾选的话可能会安装特别慢，四五个小时都有可能<br><img src="https://i.loli.net/2021/03/25/qRcsrCnpEfIoeAh.jpg" alt="01.jpg"><br>详细安装过程可参考菜鸟教程<br><a href="https://www.runoob.com/mongodb/mongodb-window-install.html">https://www.runoob.com/mongodb/mongodb-window-install.html</a></p><h5 id="MongoDB-Compass（可视化工具）安装"><a href="#MongoDB-Compass（可视化工具）安装" class="headerlink" title="MongoDB Compass（可视化工具）安装"></a>MongoDB Compass（可视化工具）安装</h5><p>进入 <a href="https://www.mongodb.com/try/download/compass">https://www.mongodb.com/try/download/compass</a> 这个链接下载可视化工具<br>下载完成后，会得到一个压缩文件，解压到任意文件夹里即可，<br>压缩包解压之后，上方有一个MongoDBCompass.exe文件，打开即可</p><p><strong>MongoDB使用</strong></p><p>基本语法</p><table><thead><tr><th>命令</th><th>语法</th></tr></thead><tbody><tr><td>创建数据库</td><td>use 数据库名</td></tr><tr><td>展示所有数据库</td><td>show dbss</td></tr><tr><td>查看当前所在数据库</td><td>db</td></tr><tr><td>创建集合（表）</td><td>db.createCollection(‘集合’)</td></tr><tr><td>展示集合（表）</td><td>show 集合名</td></tr><tr><td>插入数据</td><td>db.集合.insert({…})</td></tr><tr><td>读取数据</td><td>db.集合.find()</td></tr><tr><td>读取指定数据</td><td>db.集合.find({id:1})</td></tr><tr><td>读取一条数据</td><td>db.集合.find_one({id:1})</td></tr><tr><td>更新数据</td><td>db.数据库名.update({查询条件},{更新内容})）</td></tr><tr><td>指定删除下所有数据</td><td>db.数据库名.remove({})</td></tr><tr><td>删除集合下的某一条数据</td><td>db.数据库名.remove({查询条件})</td></tr><tr><td>删除指定集合（表）</td><td>db.数据库名.drop()</td></tr><tr><td>删除当前数据库</td><td>db.dropDatabase()</td></tr></tbody></table><h4 id="python操作MongoDB"><a href="#python操作MongoDB" class="headerlink" title="python操作MongoDB"></a>python操作MongoDB</h4><h5 id="下载python中的MongoDB"><a href="#下载python中的MongoDB" class="headerlink" title="下载python中的MongoDB"></a>下载python中的MongoDB</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> pip install pymongo</span></span><br></pre></td></tr></table></figure><h5 id="下载完成之后，进行连接（此处要导包）"><a href="#下载完成之后，进行连接（此处要导包）" class="headerlink" title="下载完成之后，进行连接（此处要导包）"></a>下载完成之后，进行连接（此处要导包）</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient </span><br><span class="line">lient = MongoClient(host=’<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>’, port=<span class="number">27017</span>)</span><br></pre></td></tr></table></figure><p>接下来需要进入我们在MongoDB创建的数据库(mongotest)<br>此处没有创建数据库的，需要手动创建MongoDB数据库（看上方的基本语法）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db = client.mongotest</span><br></pre></td></tr></table></figure><p>指定集合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">table = db.CateTemplate</span><br></pre></td></tr></table></figure><p>建立好之后，就可以进行查询了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span></span><br><span class="line">    <span class="comment"># 进入数据库</span></span><br><span class="line">    db = client.mongotest</span><br><span class="line">    <span class="comment"># 集合</span></span><br><span class="line">    dbset = db.CateTemplate</span><br><span class="line">    <span class="built_in">id</span> = request.GET.get(<span class="string">&#x27;id&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">    tid = WorkOrderModel.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=<span class="built_in">id</span>).first()</span><br><span class="line">    data = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> zjq.find(&#123;<span class="string">&#x27;tid&#x27;</span>: <span class="built_in">str</span>(tid.pid)&#125;):</span><br><span class="line">        data = <span class="built_in">eval</span>(i[<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line">    <span class="keyword">return</span> Response(data)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>自建消息队列并设置加权</title>
      <link href="2019/06/16/%E8%87%AA%E5%BB%BA%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
      <url>2019/06/16/%E8%87%AA%E5%BB%BA%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h4 id="一、什么是消息队列？"><a href="#一、什么是消息队列？" class="headerlink" title="一、什么是消息队列？"></a>一、什么是消息队列？</h4><blockquote><p>队列是一种先进先出的数据结构。把数据放到消息队列叫做生产者,从消息队列里边取数据叫做消费者</p></blockquote><h5 id="二、列表实现相关代码"><a href="#二、列表实现相关代码" class="headerlink" title="二、列表实现相关代码"></a>二、列表实现相关代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自定义队列类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span>:</span></span><br><span class="line">    <span class="comment"># 初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.s = []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 消息入队</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span>(<span class="params">self, x: <span class="built_in">tuple</span></span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line"></span><br><span class="line">        self.s.append(x)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 消息出队</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.s:</span><br><span class="line">            <span class="keyword">return</span> self.s.pop(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;队列为空&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 队列为空</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">empty</span>(<span class="params">self</span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> <span class="built_in">bool</span>(self.s)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 展示队列全部任务</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.s</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 加权，等级高的优先输出，同等级先进先出</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">px</span>(<span class="params">self</span>):</span></span><br><span class="line">        a_list = self.show()</span><br><span class="line">        n = <span class="built_in">len</span>(a_list)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, n - i - <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> a_list[j][<span class="number">2</span>] &lt; a_list[j + <span class="number">1</span>][<span class="number">2</span>]:</span><br><span class="line">                    a_list[j], a_list[j + <span class="number">1</span>] = a_list[j + <span class="number">1</span>], a_list[j]</span><br><span class="line">        <span class="keyword">return</span> a_list</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加测试数据</span></span><br><span class="line">myq = MyQueue()</span><br><span class="line">myq.push((<span class="number">1</span>, <span class="string">&#x27;aaa&#x27;</span>, <span class="number">1</span>))</span><br><span class="line">myq.push((<span class="number">2</span>, <span class="string">&#x27;bbb&#x27;</span>, <span class="number">2</span>))</span><br><span class="line">myq.push((<span class="number">3</span>, <span class="string">&#x27;ccc&#x27;</span>, <span class="number">3</span>))</span><br><span class="line">myq.push((<span class="number">4</span>, <span class="string">&#x27;ddd&#x27;</span>, <span class="number">3</span>))</span><br><span class="line">myq.push((<span class="number">5</span>, <span class="string">&#x27;eee&#x27;</span>, <span class="number">4</span>))</span><br><span class="line">myq.push((<span class="number">6</span>, <span class="string">&#x27;fff&#x27;</span>, <span class="number">1</span>))</span><br><span class="line">myq.push((<span class="number">7</span>, <span class="string">&#x27;ggg&#x27;</span>, <span class="number">4</span>))</span><br><span class="line">myq.px()</span><br><span class="line"><span class="built_in">print</span>(myq.show())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="comment"># [(5, &#x27;eee&#x27;, 4), (7, &#x27;ggg&#x27;, 4), (3, &#x27;ccc&#x27;, 3), (4, &#x27;ddd&#x27;, 3), (2, &#x27;bbb&#x27;, 2), (1, &#x27;aaa&#x27;, 1), (6, &#x27;fff&#x27;, 1)]</span></span><br></pre></td></tr></table></figure><h5 id="三、redis实现消息队列代码如下"><a href="#三、redis实现消息队列代码如下" class="headerlink" title="三、redis实现消息队列代码如下"></a>三、redis实现消息队列代码如下</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RedisQueue</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, key, **redis_kwargs</span>):</span></span><br><span class="line">        <span class="comment"># __db  私有变量</span></span><br><span class="line">        self.__db = redis.Redis(**redis_kwargs)</span><br><span class="line">        <span class="comment"># self.r_len =self.__db.llen(&#x27;redisqueue&#x27;)</span></span><br><span class="line"></span><br><span class="line">        self.key = key</span><br><span class="line">    <span class="comment"># 入队</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        self.__db.rpush(self.key, item)</span><br><span class="line">    <span class="comment"># 出队</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span>(<span class="params">self</span>):</span></span><br><span class="line">        item = self.__db.lpop(self.key)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">q = RedisQueue(<span class="string">&#x27;redisqueue&#x27;</span>)</span><br><span class="line"><span class="comment"># 入队</span></span><br><span class="line">[q.put(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 出队</span></span><br><span class="line"><span class="comment"># print(q.r_len,&#x27;11111&#x27;)</span></span><br><span class="line"><span class="comment"># for i in range(10):</span></span><br><span class="line"><span class="comment">#     print(q.pop())</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>docker容器与镜像</title>
      <link href="2019/05/21/docker%E5%AE%B9%E5%99%A8%E4%B8%8E%E9%95%9C%E5%83%8F/"/>
      <url>2019/05/21/docker%E5%AE%B9%E5%99%A8%E4%B8%8E%E9%95%9C%E5%83%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="docker容器"><a href="#docker容器" class="headerlink" title="docker容器"></a>docker容器</h1><h2 id="docker简介"><a href="#docker简介" class="headerlink" title="docker简介"></a>docker简介</h2><p>Docker（码头⼯⼈）是⼀个开源项⽬，诞⽣于 2013 年初</p><p>最初是 dotCloud 公司（后由于 Docker 开源后⼤受欢迎就将公司改名为 Docker Inc ，总部位于美国加 州的旧⾦⼭）内部的⼀个开源的 PAAS 服务 (Platform as a ServiceService )的业余项⽬</p><p>它基于 Google 公司推出的 Go 语⾔实现</p><p>项⽬后来加⼊了 Linux 基⾦会，遵从了 Apache 2.0 协议，项⽬代码在 GitHub 上进⾏维护</p><hr><p>Docker 是基于 linux 内核实现，Docker 最早采⽤ LXC 技术 ，LXC 是 Linux 原⽣⽀持的容器技术，可 以提供轻量级的虚拟化</p><p>可以说 docker 就是基于 LXC 发展起来 的，提供 LXC 的⾼级封装，标准的配置⽅法</p><p>在LXC的基础之上，docker提供了⼀系列更强⼤的功能</p><p>⽽虚拟化技术 KVM(KernelKernel-based Virtual Machine Machine) 基于模块实现， 后来Docker 改为 ⾃⼰研发并开源的 runc 技术运⾏容器，彻底抛弃了LXC</p><h2 id="docker优点"><a href="#docker优点" class="headerlink" title="docker优点"></a>docker优点</h2><p>Docker相⽐虚拟机的交付速度更快，资源消耗更低</p><p>Docker采⽤客户端/服务端架构、使⽤远程API来管理和创建容器、可以轻松的创建⼀个轻量级的、可移 植的、⾃给⾃⾜的容器</p><p>docker 的三⼤理念是build(构建)、ship(运输)、run(运⾏) Docker遵从apache 2.0协议，并通过（namespace及cgroup等）来提供容器的资源隔离与安全保障等</p><p>所以Docke容器在运⾏时不需要类似虚拟机（空运⾏的虚拟机占占⽤物理机6-8%性能）的额外资源开销， 因此可以⼤幅提⾼资源利⽤率</p><p>总⽽⾔之Docker是⼀种⽤了新颖⽅式实现的轻量级虚拟机.类似于VM但是在原理和应⽤上和VM的差别 还是很⼤的，并且docker的专业叫法是应⽤容器(Application Container)</p><h3 id="Docker隔离试验环境"><a href="#Docker隔离试验环境" class="headerlink" title="Docker隔离试验环境"></a>Docker隔离试验环境</h3><blockquote><p>不能说让用户直接连接云主机，这样一个用户失败的操作会影响到所有用户，不安全，不靠谱，不隔离</p></blockquote><ul><li>虚拟化操作：把一个操作系统分成多个操作系统<ul><li>vmware：太过于庞大，太过于慢，但是确实安装出来的虚拟机：<strong>隔离性很好</strong></li><li>lvm</li><li>kvm</li><li>docker：更快，更轻巧，但是隔离性不好</li></ul></li></ul><blockquote><p>一个家用电脑，4G内存，安vmware，最多按俩，需要花费最少1个小时</p><p>如果是4g内存，安装docker，最多可以支持50+，而且最多只需要50个花费不到5分钟</p></blockquote><hr><ol><li>识别用户身份，如果是vip，那么提供单独虚拟机，供其操作</li><li>使用docker生成虚拟机</li></ol><hr><ul><li>下载镜像：docker pull</li><li>查看所有镜像：docker images</li><li>删除景象：docker rmi 镜像id</li></ul><hr><ul><li>启动容器：docker run</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CODE</span><br><span class="line">docker run -d -i -t 镜像id /bin/bash</span><br><span class="line">CODE</span><br><span class="line">docker run -it -d 镜像id /bin/bash</span><br><span class="line">docker run -it -d -p 11111:22 镜像id /bin/bash </span><br><span class="line">CODE</span><br><span class="line">-it 具有shell终端</span><br><span class="line">-d 后台</span><br><span class="line">-p 端口映射 真实物理机的端口:容器内的端口</span><br></pre></td></tr></table></figure><ul><li>查看所有运行着的容器：docker ps</li><li>先进入容器进行配置，配置有关webssh连接的事项</li></ul><blockquote><p>ssh: xshell,webshell</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CODE</span><br><span class="line">docker attach 镜像id</span><br></pre></td></tr></table></figure><ul><li>安装ssh</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CODE</span><br><span class="line">yum install openssh-server</span><br></pre></td></tr></table></figure><ul><li>生成当前主机的ssh-key</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CODE</span><br><span class="line">ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key</span><br><span class="line">CODE</span><br><span class="line">ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key</span><br><span class="line">CODE</span><br><span class="line">ssh-keygen -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key</span><br><span class="line">CODE</span><br><span class="line">ssh-keygen -t dsa -f /etc/ssh/ssh_host_ed25519_key</span><br></pre></td></tr></table></figure><ul><li>在容器里启动ssh服务，让外界可以连接</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CODE</span><br><span class="line">/usr/sbin/sshd</span><br></pre></td></tr></table></figure><ul><li>停止容器，重新启动，重新进行端口映射</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CODE</span><br><span class="line">docker stop 镜像id</span><br></pre></td></tr></table></figure><ul><li>重新启动一个容器</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CODE</span><br><span class="line">启动之初进行端口映射</span><br><span class="line">docker run -it -d -p 11111:22 容器id /bin/bash </span><br><span class="line">重新安装ssh</span><br><span class="line">设置容器里root的密码</span><br><span class="line">yum install passwd.x86_64</span><br><span class="line">passwd root</span><br></pre></td></tr></table></figure><ul><li>启动刚才停止的，只不过在新的启动时，加上新的参数，进行端口映射</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CODE</span><br><span class="line">docker start 容器id</span><br></pre></td></tr></table></figure><blockquote><p>vip有单独的容器可以试验操作</p><p>用户vip到期可以自动回收</p><p>日志记录用户命令执行</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>简易视频直播</title>
      <link href="2019/05/03/%E7%AE%80%E6%98%93%E8%A7%86%E9%A2%91%E7%9B%B4%E6%92%AD/"/>
      <url>2019/05/03/%E7%AE%80%E6%98%93%E8%A7%86%E9%A2%91%E7%9B%B4%E6%92%AD/</url>
      
        <content type="html"><![CDATA[<h2 id="搭建直播服务器"><a href="#搭建直播服务器" class="headerlink" title="搭建直播服务器"></a>搭建直播服务器</h2><h3 id="视频直播就是在线直播，全民娱乐的互动直播平台"><a href="#视频直播就是在线直播，全民娱乐的互动直播平台" class="headerlink" title="视频直播就是在线直播，全民娱乐的互动直播平台"></a>视频直播就是在线直播，全民娱乐的互动直播平台</h3><h3 id="我们使用obs-直播软件-实现推流和vlc-媒体播放器-实现拉流"><a href="#我们使用obs-直播软件-实现推流和vlc-媒体播放器-实现拉流" class="headerlink" title="我们使用obs(直播软件)实现推流和vlc(媒体播放器)实现拉流"></a>我们使用obs(直播软件)实现推流和vlc(媒体播放器)实现拉流</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">obs下载链接：https:&#x2F;&#x2F;obsproject.com&#x2F;</span><br><span class="line">vlc下载链接：https:&#x2F;&#x2F;www.videolan.org&#x2F;</span><br></pre></td></tr></table></figure><h3 id="推流为将直播内容推送至服务器的过程；拉流为服务器已有直播内容，用指定地址进行拉取的过程。"><a href="#推流为将直播内容推送至服务器的过程；拉流为服务器已有直播内容，用指定地址进行拉取的过程。" class="headerlink" title="推流为将直播内容推送至服务器的过程；拉流为服务器已有直播内容，用指定地址进行拉取的过程。"></a>推流为将直播内容推送至服务器的过程；拉流为服务器已有直播内容，用指定地址进行拉取的过程。</h3><h3 id="推流-OBS-：主播开了摄像头，把直播流数据发给直播服务器"><a href="#推流-OBS-：主播开了摄像头，把直播流数据发给直播服务器" class="headerlink" title="推流(OBS)：主播开了摄像头，把直播流数据发给直播服务器"></a>推流(OBS)：主播开了摄像头，把直播流数据发给<strong>直播服务器</strong></h3><h3 id="拉流-Vlc-：观众，通过拉流-浏览器，vlc-，将主播推上去的数据拉下来"><a href="#拉流-Vlc-：观众，通过拉流-浏览器，vlc-，将主播推上去的数据拉下来" class="headerlink" title="拉流(Vlc)：观众，通过拉流(浏览器，vlc)，将主播推上去的数据拉下来"></a>拉流(Vlc)：观众，通过拉流(浏览器，vlc)，将主播推上去的数据拉下来</h3><h2 id="直播："><a href="#直播：" class="headerlink" title="直播："></a>直播：</h2><h3 id="我们需要的软件是："><a href="#我们需要的软件是：" class="headerlink" title="我们需要的软件是："></a>我们需要的软件是：</h3><h3 id="1-打开obs"><a href="#1-打开obs" class="headerlink" title="1.打开obs"></a>1.打开obs</h3><h3 id="2-设置推流地址及密钥"><a href="#2-设置推流地址及密钥" class="headerlink" title="2.设置推流地址及密钥"></a>2.设置推流地址及密钥</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">推流地址: 192.168.1.104:6666&#x2F;live&#x2F;[子路径]</span><br></pre></td></tr></table></figure><h2 id="让自己的云主机成为直播服务器"><a href="#让自己的云主机成为直播服务器" class="headerlink" title="让自己的云主机成为直播服务器"></a>让自己的云主机成为直播服务器</h2><h4 id="centos"><a href="#centos" class="headerlink" title="- centos"></a>- centos</h4><h4 id="centos实现直播服务器"><a href="#centos实现直播服务器" class="headerlink" title="centos实现直播服务器"></a>centos实现直播服务器</h4><h4 id="rtmp协议：实现直播的协议"><a href="#rtmp协议：实现直播的协议" class="headerlink" title="rtmp协议：实现直播的协议"></a>rtmp协议：实现直播的协议</h4><h3 id="环境部署"><a href="#环境部署" class="headerlink" title="环境部署"></a>环境部署</h3><h4 id="创建保存软件目录"><a href="#创建保存软件目录" class="headerlink" title="创建保存软件目录"></a>创建保存软件目录</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /home</span><br><span class="line">mkdir rtmp-tools </span><br></pre></td></tr></table></figure><h4 id="下载nginx"><a href="#下载nginx" class="headerlink" title="下载nginx"></a>下载nginx</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://nginx.org/download/nginx-1.10.3.tar.gz</span><br></pre></td></tr></table></figure><h4 id="下载直播模块"><a href="#下载直播模块" class="headerlink" title="下载直播模块"></a>下载直播模块</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/arut/nginx-rtmp-module</span><br></pre></td></tr></table></figure><h4 id="解压下载好的nginx"><a href="#解压下载好的nginx" class="headerlink" title="解压下载好的nginx"></a>解压下载好的nginx</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nginx-1.10.3.tar.gz nginx-1.10.3/</span><br></pre></td></tr></table></figure><h4 id="解压下载好的rtmp直播模块"><a href="#解压下载好的rtmp直播模块" class="headerlink" title="解压下载好的rtmp直播模块"></a>解压下载好的rtmp直播模块</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip nginx-rtmp-module-master.zip </span><br></pre></td></tr></table></figure><h4 id="创建nginx的安装目录"><a href="#创建nginx的安装目录" class="headerlink" title="创建nginx的安装目录"></a>创建nginx的安装目录</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/local/nginx-rtmp</span><br></pre></td></tr></table></figure><h4 id="配置前，要先记得安装依赖"><a href="#配置前，要先记得安装依赖" class="headerlink" title="配置前，要先记得安装依赖"></a>配置前，要先记得安装依赖</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y gcc gcc-c++ pcre pcre-devel zlib zlib-devel openssl openssl-devel </span><br></pre></td></tr></table></figure><h4 id="配置nginx安装过程，搭配直播模块使用-nginx-rtmp-module"><a href="#配置nginx安装过程，搭配直播模块使用-nginx-rtmp-module" class="headerlink" title="配置nginx安装过程，搭配直播模块使用(nginx-rtmp-module)"></a>配置nginx安装过程，搭配直播模块使用(nginx-rtmp-module)</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd nginx-1.10.3</span><br><span class="line">./configure --add-module=/home/rtmp-tools/nginx-rtmp-module-master/ --with-http_ssl_module --prefix=/usr/local/nginx-rtmp</span><br></pre></td></tr></table></figure><h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><h4 id="安装过程中会出错"><a href="#安装过程中会出错" class="headerlink" title="安装过程中会出错"></a>安装过程中会出错</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">src/core/ngx_murmurhash.c:40:5: 附注：here</span><br><span class="line">     case 1:</span><br><span class="line">     ^~~~</span><br><span class="line">cc1：所有的警告都被当作是错误</span><br><span class="line">make[1]: *** [objs/Makefile:539：objs/src/core/ngx_murmurhash.o] 错误 1</span><br><span class="line">make[1]: 离开目录“/home/rtmp-tools/nginx-1.10.3”</span><br><span class="line">make: *** [Makefile:8：build] 错误 2</span><br><span class="line">1. vim objs/Makefile</span><br><span class="line">2. 删除其中: -Werror</span><br><span class="line">   1. **CFLAGS** = -pipe -O -W -Wall -Wpointer-arith -Wno-unused -g</span><br><span class="line">src/os/unix/ngx_user.c</span><br><span class="line">src/os/unix/ngx_user.c: 在函数‘ngx_libc_crypt’中:</span><br><span class="line">src/os/unix/ngx_user.c:36:7: 错误：‘struct crypt_data’没有名为‘current_salt’的成员</span><br><span class="line">     cd.current_salt[0] = ~salt[0];</span><br><span class="line">       ^</span><br><span class="line">make[1]: *** [objs/Makefile:840：objs/src/os/unix/ngx_user.o] 错误 1</span><br><span class="line">make[1]: 离开目录“/home/rtmp-tools/nginx-1.10.3”</span><br><span class="line">make: *** [Makefile:8：build] 错误 2</span><br></pre></td></tr></table></figure><h4 id="vim-src-os-unix-ngx-user-c"><a href="#vim-src-os-unix-ngx-user-c" class="headerlink" title="vim src/os/unix/ngx_user.c"></a>vim src/os/unix/ngx_user.c</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">ifdef __GLIBC__</span></span><br><span class="line">    /* work around the glibc bug */</span><br><span class="line">    cd.current_salt[0] = ~salt[0]; // 注释这一行</span><br><span class="line"><span class="meta">#</span><span class="bash">endif</span></span><br></pre></td></tr></table></figure><h4 id="真正安装"><a href="#真正安装" class="headerlink" title="真正安装"></a>真正安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install </span><br></pre></td></tr></table></figure><h4 id="修改nginx配置文件"><a href="#修改nginx配置文件" class="headerlink" title="修改nginx配置文件"></a>修改nginx配置文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx-rtmp/conf</span><br><span class="line">vim nginx.conf</span><br><span class="line">rtmp &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 1935;</span><br><span class="line">        application live &#123;</span><br><span class="line">            live on;</span><br><span class="line">            record off;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置文件http拉流部分"><a href="#配置文件http拉流部分" class="headerlink" title="配置文件http拉流部分"></a>配置文件http拉流部分</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">include       mime.types;</span><br><span class="line">default_type  application/octet-stream;</span><br><span class="line">sendfile        on;</span><br><span class="line">keepalive_timeout  65;</span><br><span class="line">server &#123;</span><br><span class="line">listen       8080; # 拉流通过8080去拉流</span><br><span class="line"><span class="meta">#</span><span class="bash"> http://123.123.123.123:8080/live/?port=1935&amp;stream=<span class="built_in">test</span></span></span><br><span class="line">server_name  localhost;</span><br><span class="line">location /live &#123;</span><br><span class="line">flv_live on;</span><br><span class="line">chunked_transfer_encoding  on;</span><br><span class="line">add_header &#x27;Access-Control-Allow-Origin&#x27; &#x27;*&#x27;;</span><br><span class="line">add_header &#x27;Access-Control-Allow-Credentials&#x27; &#x27;true&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="·关闭旧有服务"><a href="#·关闭旧有服务" class="headerlink" title="·关闭旧有服务"></a>·关闭旧有服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx-rtmp/sbin/nginx -s stop</span><br><span class="line">/usr/local/nginx-rtmp/sbin/nginx -s reload</span><br></pre></td></tr></table></figure><h4 id="开启新服务"><a href="#开启新服务" class="headerlink" title="开启新服务"></a>开启新服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx-flv/sbin/nginx -c /usr/local/nginx-flv/conf/nginx.conf</span><br></pre></td></tr></table></figure><h2 id="打开OBS进行推流配置"><a href="#打开OBS进行推流配置" class="headerlink" title="打开OBS进行推流配置"></a>打开OBS进行推流配置</h2><h4 id="推流地址为-rtmp-123-123-123-123-1935-live-123"><a href="#推流地址为-rtmp-123-123-123-123-1935-live-123" class="headerlink" title="推流地址为:rtmp://123.123.123.123:1935/live/123"></a>推流地址为:rtmp://123.123.123.123:1935/live/123</h4><h2 id="打开VLC进行拉流"><a href="#打开VLC进行拉流" class="headerlink" title="打开VLC进行拉流"></a>打开VLC进行拉流</h2><h4 id="拉流地址为-http-123-123-123-123-1935-live-port-1935-amp-app-live-amp-stream-111"><a href="#拉流地址为-http-123-123-123-123-1935-live-port-1935-amp-app-live-amp-stream-111" class="headerlink" title="拉流地址为:http://123.123.123.123:1935/live?port=1935&amp;app=live&amp;stream=111"></a>拉流地址为:<a href="http://123.123.123.123:1935/live?port=1935&amp;app=live&amp;stream=111">http://123.123.123.123:1935/live?port=1935&amp;app=live&amp;stream=111</a></h4><h2 id="Vue实现拉流"><a href="#Vue实现拉流" class="headerlink" title="Vue实现拉流"></a>Vue实现拉流</h2><h4 id="安装flv-js开源工具，进行拉流"><a href="#安装flv-js开源工具，进行拉流" class="headerlink" title="安装flv.js开源工具，进行拉流"></a>安装flv.js开源工具，进行拉流</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install flv.js --save</span><br></pre></td></tr></table></figure><h4 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import flv from &#x27;flv.js&#x27;</span><br></pre></td></tr></table></figure><h4 id="创建播放页面"><a href="#创建播放页面" class="headerlink" title="创建播放页面"></a>创建播放页面</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;video id=<span class="string">&quot;videoElement&quot;</span> controls muted&gt;</span><br><span class="line">  Your browser is too old which doesn<span class="string">&#x27;t support HTML5 video.</span></span><br><span class="line"><span class="string">&lt;/video&gt;</span></span><br><span class="line"><span class="string">mounted() &#123;</span></span><br><span class="line"><span class="string">    var videoElement = document.getElementById(&#x27;</span>videoElement<span class="string">&#x27;);</span></span><br><span class="line"><span class="string">    var flvPlayer = flv.createPlayer(&#123;</span></span><br><span class="line"><span class="string">      type: &#x27;</span>flv<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">      enableWorker: true,     //浏览器端开启flv.js的worker,多进程运行flv.js</span></span><br><span class="line"><span class="string">      isLive: true,           //直播模式</span></span><br><span class="line"><span class="string">      hasAudio: false,        //关闭音频</span></span><br><span class="line"><span class="string">      hasVideo: true,</span></span><br><span class="line"><span class="string">      stashInitialSize: 128,</span></span><br><span class="line"><span class="string">      enableStashBuffer: false, //播放flv时，设置是否启用播放缓存，只在直播起作用。</span></span><br><span class="line"><span class="string">      url: &#x27;</span>http:<span class="comment">//47.93.48.154:8080/live?port=1935&amp;app=live&amp;stream=test&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    flvPlayer.attachMediaElement(videoElement);</span><br><span class="line">    flvPlayer.load();</span><br><span class="line">    flvPlayer.play();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python + django 实现无限级分类</title>
      <link href="2019/03/11/%E6%97%A0%E9%99%90%E7%BA%A7%E5%88%86%E7%B1%BB/"/>
      <url>2019/03/11/%E6%97%A0%E9%99%90%E7%BA%A7%E5%88%86%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h4 id="1-什么是无限级分类？"><a href="#1-什么是无限级分类？" class="headerlink" title="1.什么是无限级分类？"></a>1.什么是无限级分类？</h4><ul><li>顾名思义，就是一级接一级的无限制分级。其实简单点说就是一个人类可以繁衍出多个后代，然后一个后代又可以分另外多个后代这样无限繁衍下去（举例：家族族谱），就好象linux系统你可以新建一个文件夹，然后在这个文件夹里又可以建一些个文件夹，在文件夹底下还可以建一些文件夹一样，随后使用tree命令就可以查看文件夹目录层级。那么这种层级结构也成为树结构在日常的开发需求里也是很常见的，比如淘宝商城系统的商品分类，课程的目录章节，以及论坛里的帖子回复等等*<br>好了，话不多说，上代码（我们以工单系统为例）！！！<h3 id="以下为后端代码："><a href="#以下为后端代码：" class="headerlink" title="以下为后端代码："></a>以下为后端代码：</h3><h5 id="首先，打开django项目中的models-py，新建一个类别的模型类，这里我们以最简单的parent-id的形式来建立（相当于自关联）"><a href="#首先，打开django项目中的models-py，新建一个类别的模型类，这里我们以最简单的parent-id的形式来建立（相当于自关联）" class="headerlink" title="首先，打开django项目中的models.py，新建一个类别的模型类，这里我们以最简单的parent_id的形式来建立（相当于自关联）"></a>首先，打开django项目中的models.py，新建一个类别的模型类，这里我们以最简单的parent_id的形式来建立（相当于自关联）</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WorkOrder</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">50</span>, verbose_name=<span class="string">&#x27;分类名称&#x27;</span>)</span><br><span class="line">    pid = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">&#x27;父类ID&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">&#x27;workorder&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></table></figure><h5 id="因为我的项目是基于drf框架，所以需要一个序列化器："><a href="#因为我的项目是基于drf框架，所以需要一个序列化器：" class="headerlink" title="因为我的项目是基于drf框架，所以需要一个序列化器："></a>因为我的项目是基于drf框架，所以需要一个序列化器：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.serializers <span class="keyword">import</span> ModelSerializer</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderSer</span>(<span class="params">ModelSerializer</span>):</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = WorkOrder</span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span></span><br></pre></td></tr></table></figure><h5 id="由于django序列化出来的类不具备层级结构，所以我们提前在views-py中写好一个用来递归的方法："><a href="#由于django序列化出来的类不具备层级结构，所以我们提前在views-py中写好一个用来递归的方法：" class="headerlink" title="由于django序列化出来的类不具备层级结构，所以我们提前在views.py中写好一个用来递归的方法："></a>由于django序列化出来的类不具备层级结构，所以我们提前在views.py中写好一个用来递归的方法：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xTree</span>(<span class="params">datas</span>):</span></span><br><span class="line">    lists = []</span><br><span class="line">    tree = &#123;&#125;</span><br><span class="line">    parent_id = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> datas:</span><br><span class="line">        item = i</span><br><span class="line">        <span class="built_in">print</span>(item)</span><br><span class="line">        tree[item[<span class="string">&#x27;id&#x27;</span>]] = item</span><br><span class="line">    root = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> datas:</span><br><span class="line">        obj = i</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> obj[<span class="string">&#x27;pid&#x27;</span>]:</span><br><span class="line">            root = tree[obj[<span class="string">&#x27;id&#x27;</span>]]</span><br><span class="line">            lists.append(root)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            parent_id = obj[<span class="string">&#x27;pid&#x27;</span>]</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;childlist&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> tree[parent_id]:</span><br><span class="line">                tree[parent_id][<span class="string">&#x27;childlist&#x27;</span>] = []</span><br><span class="line">            tree[parent_id][<span class="string">&#x27;childlist&#x27;</span>].append(tree[obj[<span class="string">&#x27;id&#x27;</span>]])</span><br><span class="line">    <span class="keyword">return</span> lists</span><br></pre></td></tr></table></figure><h5 id="此时我们再写一个视图接口，从数据库中读取数据就可以了"><a href="#此时我们再写一个视图接口，从数据库中读取数据就可以了" class="headerlink" title="此时我们再写一个视图接口，从数据库中读取数据就可以了"></a>此时我们再写一个视图接口，从数据库中读取数据就可以了</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTree</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="comment"># 获取订单列表</span></span><br><span class="line">        orderlist = WorkOrder.objects.<span class="built_in">all</span>()</span><br><span class="line">        <span class="comment"># 序列化</span></span><br><span class="line">        orderlist_ser = OrderSer(orderlist, many=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        mylist = xTree(orderlist_ser.data)</span><br><span class="line">        <span class="comment"># print(mylist)</span></span><br><span class="line">        <span class="keyword">return</span> Response(mylist)</span><br></pre></td></tr></table></figure><h5 id="最后为咱们的视图添加路由"><a href="#最后为咱们的视图添加路由" class="headerlink" title="最后为咱们的视图添加路由"></a>最后为咱们的视图添加路由</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> userapp.views <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;mytree/&#x27;</span>, MyTree.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="好了，以上就是我们后端的代码"><a href="#好了，以上就是我们后端的代码" class="headerlink" title="好了，以上就是我们后端的代码"></a>好了，以上就是我们后端的代码</h4><h5 id="然后我们向数据库添加测试数据"><a href="#然后我们向数据库添加测试数据" class="headerlink" title="然后我们向数据库添加测试数据"></a>然后我们向数据库添加测试数据</h5><img src="https://i.loli.net/2021/03/25/YLad1pKinQhys2W.png" alt="数据库信息"></li></ul><h5 id="Postman测试后端接口："><a href="#Postman测试后端接口：" class="headerlink" title="Postman测试后端接口："></a>Postman测试后端接口：</h5><p><img src="https://i.loli.net/2021/03/25/eIUajfPz45HKkuA.png" alt="postman测试数据展示"></p><h3 id="perfect！！！"><a href="#perfect！！！" class="headerlink" title="perfect！！！"></a>perfect！！！</h3><h4 id="接下来我们再说说前端："><a href="#接下来我们再说说前端：" class="headerlink" title="接下来我们再说说前端："></a>接下来我们再说说前端：</h4><h5 id="打开vue项目，封装一个WXJcate-vue递归组件"><a href="#打开vue项目，封装一个WXJcate-vue递归组件" class="headerlink" title="打开vue项目，封装一个WXJcate.vue递归组件"></a>打开vue项目，封装一个WXJcate.vue递归组件</h5><blockquote><p>所谓递归组件: 就是组件可以在它们自己的模板中调用自身，不过它们只能通过 name 选项来做这件事，例如给组件设置属性 name: ‘WorkOrder.vue’，然后在模板中就可以使用 WorkOrder调用自己进行递归调用了</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;div :class&#x3D;&quot;[data.id&#x3D;&#x3D;0 ? &#39;root&#39;: &#39;&#39;, &#39;workorder&#39;]&quot;&gt;&#123;&#123; data.name &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">      &lt;ol v-if&#x3D;&quot;data.childlist &amp;&amp; data.childlist.length&gt;0&quot;&gt;</span><br><span class="line">        &lt;workorder v-for&#x3D;&quot;child in data.childlist&quot; :key&#x3D;&quot;child.id&quot; :data&#x3D;&quot;child&quot;&#x2F;&gt;</span><br><span class="line">      &lt;&#x2F;ol&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#39;workorder&#39;, &#x2F;&#x2F; 递归组件需要设置 name 属性，才能在模板中调用自己</span><br><span class="line">    props:[&#39;data&#39;],</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style &gt;</span><br><span class="line">  .workorder &#123;</span><br><span class="line">    padding-left: 8px;</span><br><span class="line">    border-left: 1px solid gray;</span><br><span class="line">  &#125;</span><br><span class="line">  ul &#123;</span><br><span class="line">    padding-left: 20px;</span><br><span class="line">    list-style: none;</span><br><span class="line">  &#125;</span><br><span class="line">  .root &#123; display: none; &#125;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h5 id="然后就可以在其他页面中调用这个递归组件"><a href="#然后就可以在其他页面中调用这个递归组件" class="headerlink" title="然后就可以在其他页面中调用这个递归组件"></a>然后就可以在其他页面中调用这个递归组件</h5><h5 id="在order-Index-vue调用递归组件并请求后端的数据："><a href="#在order-Index-vue调用递归组件并请求后端的数据：" class="headerlink" title="在order_Index.vue调用递归组件并请求后端的数据："></a>在order_Index.vue调用递归组件并请求后端的数据：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      工单项目名称: &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;name&quot;&gt;</span><br><span class="line">      父级分类：</span><br><span class="line">      &lt;select v-model&#x3D;&quot;pid&quot;&gt;</span><br><span class="line">        &lt;option value&#x3D;&quot;0&quot;&gt;主项目&lt;&#x2F;option&gt;</span><br><span class="line">        &lt;option :value&#x3D;&#39;order.id&#39; v-for&#x3D;&quot;order in order_list&quot; :key&#x3D;&quot;order.id&quot;&gt;&#123;&#123;order.name&#125;&#125;&lt;&#x2F;option&gt;</span><br><span class="line">      &lt;&#x2F;select&gt;</span><br><span class="line">      &lt;button @click&#x3D;&quot;btn&quot;&gt;添加&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;workorder :data&#x3D;&quot;data&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  import workorder from &#39;.&#x2F;workorder.vue&#39;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    data () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        data:&#123;&#125;,</span><br><span class="line">        online: 0,</span><br><span class="line">        order_list:[],</span><br><span class="line">        name:&#39;&#39;,</span><br><span class="line">        pid:&#39;&#39;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      workorder</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;钩子方法</span><br><span class="line">    mounted:function()&#123;</span><br><span class="line"></span><br><span class="line">      this.get_data();</span><br><span class="line">      this.get_order_list()</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F;绑定事件</span><br><span class="line">    methods:&#123;</span><br><span class="line">      get_data()&#123;</span><br><span class="line">        this.$axios.get(&#39;mytree&#x2F;&#39;).then((res) &#x3D;&gt;&#123;</span><br><span class="line">          console.log(res.data);</span><br><span class="line">          var mytree &#x3D; &#123;&#39;id&#39;:0,name:&#39;123&#39;&#125;;</span><br><span class="line">          mytree[&#39;childlist&#39;] &#x3D; res.data;</span><br><span class="line">          this.data &#x3D; mytree;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">      get_order_list()&#123;</span><br><span class="line">        this.$axios.get(&#39;order&#x2F;&#39;).then(res&#x3D;&gt;&#123;</span><br><span class="line">          this.order_list &#x3D; res.data</span><br><span class="line">          console.log(res.data)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      btn()&#123;</span><br><span class="line">        let fdata &#x3D;new FormData()</span><br><span class="line">        fdata.append(&#39;name&#39;,this.name)</span><br><span class="line">        fdata.append(&#39;pid&#39;,this.pid)</span><br><span class="line">        this.$axios.post(&#39;order&#x2F;&#39;,fdata).then(res&#x3D;&gt;&#123;</span><br><span class="line">          alert(&#39;添加成功&#39;)</span><br><span class="line">          this.$router.go(0)</span><br><span class="line">          console.log(fdata)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">  .on &#123;</span><br><span class="line">    background: #cdcbff;</span><br><span class="line">  &#125;</span><br><span class="line">  .off &#123;</span><br><span class="line">    background: #fefdff;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="好了，现在咱们的前端也写好了，下面让我们看一下页面的效果吧："><a href="#好了，现在咱们的前端也写好了，下面让我们看一下页面的效果吧：" class="headerlink" title="好了，现在咱们的前端也写好了，下面让我们看一下页面的效果吧："></a>好了，现在咱们的前端也写好了，下面让我们看一下页面的效果吧：</h4><p><img src="https://i.loli.net/2021/03/25/y3W49gkTNEhlUHQ.png" alt="页面效果展示"></p><h3 id="好了，今天的分享到这里就结束了，希望这篇文章可以给大家带来帮助！！！"><a href="#好了，今天的分享到这里就结束了，希望这篇文章可以给大家带来帮助！！！" class="headerlink" title="好了，今天的分享到这里就结束了，希望这篇文章可以给大家带来帮助！！！"></a>好了，今天的分享到这里就结束了，希望这篇文章可以给大家带来帮助！！！</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Webshell</title>
      <link href="2018/12/30/Webshell%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>2018/12/30/Webshell%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h2><p><strong>Webshell是黑客经常使用的一种恶意脚本，其目的是获得对服务器的执行操作权限，比如执行系统命令、窃取用户数据、删除web页面、修改主页等，其危害不言而喻。黑客通常利用常见的漏洞，如SQL注入、远程文件包含(RFI)、FTP，甚至使用跨站点脚本攻击(XSS)等方式作为社会工程攻击的一部分，最终达到控制网站服务器的目的</strong></p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p><strong>一方面，webshell被站长常常用于网站管理、服务器管理等等，根据FSO权限的不同，作用有在线编辑网页脚本、上传下载文件、查看数据库、执行任意程序命令等</strong></p><p><strong>另一方面，被入侵者利用，从而达到控制网站服务器的目的。这些网页脚本常称为WEB脚本木马，比较流行的asp或php木马，也有基于.NET的脚本木马与JSP脚本木马。国内常用的WebShell有海阳ASP木马，Phpspy，c99shell等</strong></p><h2 id="在浏览器页面实现终端为例"><a href="#在浏览器页面实现终端为例" class="headerlink" title="在浏览器页面实现终端为例"></a>在浏览器页面实现终端为例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># view.py</span></span><br><span class="line"><span class="keyword">from</span> dwebsocket <span class="keyword">import</span> accept_websocket</span><br><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_ssh</span>(<span class="params">host=<span class="string">&quot;47.93.48.154&quot;</span>, username=<span class="string">&quot;root&quot;</span>, password=<span class="string">&quot;qwe123qwe&quot;</span>, port=<span class="number">22</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :host 主机地址</span></span><br><span class="line"><span class="string">    :username 用户名，一般是root</span></span><br><span class="line"><span class="string">    :password 密码</span></span><br><span class="line"><span class="string">    :port ssh协议的端口,22</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 初始化一个ssh对象</span></span><br><span class="line">    sh = paramiko.SSHClient()</span><br><span class="line">    <span class="comment"># 设置对象连接密钥规则</span></span><br><span class="line">    sh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line">    <span class="comment"># 连接</span></span><br><span class="line">    sh.connect(host, username=username, password=password)</span><br><span class="line">    <span class="comment"># 生成shell对象</span></span><br><span class="line">    channle = sh.invoke_shell(term=<span class="string">&#x27;xterm&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> channle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recv_ssh_msg</span>(<span class="params">channle, ws</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        只管接收</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 判断shell连接对象是否没有退出</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> channle.exit_status_ready():</span><br><span class="line">        <span class="comment"># 接收过程可能会因为没有任何返回而报错</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            buf = channle.recv(<span class="number">1024</span>)  <span class="comment"># 接收命令的执行结果</span></span><br><span class="line">            ws.send(buf)  <span class="comment"># 向Websocket通道返回</span></span><br><span class="line">        <span class="comment"># 接收不到会报错，但是报错没关系，继续重新尝试接受</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@accept_websocket</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">webssh</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">if</span> request.is_websocket:</span><br><span class="line">        <span class="comment"># 1. 获取到连接对象</span></span><br><span class="line">        ws = request.websocket</span><br><span class="line">        <span class="comment"># 2. 初始化linux连接</span></span><br><span class="line">        channel = make_ssh()</span><br><span class="line">        <span class="comment"># 3. 初始化linux数据接收线程，并开启</span></span><br><span class="line">        recv_thread = Thread(target=recv_ssh_msg, args=(channel, ws))</span><br><span class="line">        recv_thread.start()</span><br><span class="line">        <span class="keyword">while</span> <span class="number">1</span>:  <span class="comment"># 主线程: 只管发送</span></span><br><span class="line">            <span class="comment"># 2. 阻塞ws接收发来的数据</span></span><br><span class="line">            cmd = ws.wait()</span><br><span class="line">            <span class="comment"># cmd = ws.recv()</span></span><br><span class="line">            <span class="keyword">if</span> cmd:</span><br><span class="line">                channel.send(cmd)  <span class="comment"># 发送到linux 去执行</span></span><br><span class="line">            <span class="keyword">else</span>:  <span class="comment"># 如果连接断开，那么cmd将会发一个空包</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        recv_thread.join()  <span class="comment"># 回收子线程</span></span><br><span class="line">        ws.close()  <span class="comment"># 关闭ws连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># urls.py</span></span><br><span class="line">path(<span class="string">&#x27;webssh/&#x27;</span>, webssh),</span><br></pre></td></tr></table></figure><p><strong>安装xterm</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save xterm</span><br></pre></td></tr></table></figure><p><strong>导入插件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在线编程终端导包</span></span><br><span class="line"><span class="keyword">import</span> &#123; Terminal &#125; <span class="keyword">from</span> <span class="string">&#x27;xterm&#x27;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> attach <span class="keyword">from</span> <span class="string">&#x27;xterm/lib/addons/attach/attach&#x27;</span> <span class="comment">// 安装插件适，可以使用attach去添加</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> fit <span class="keyword">from</span> <span class="string">&#x27;xterm/lib/addons/fit/fit&#x27;</span> <span class="comment">// fit进行自适应大小的</span></span><br><span class="line">Terminal.applyAddon(attach) <span class="comment">// 添加插件</span></span><br><span class="line">Terminal.applyAddon(fit) <span class="comment">// 添加插件</span></span><br></pre></td></tr></table></figure><p><strong>创建终端组件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;terminal&quot;</span>&gt;</span><br><span class="line">    &lt;!--            黑窗口--&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><strong>初始化终端对象</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取到了div标签</span></span><br><span class="line">        <span class="keyword">let</span> terminalContainer = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;terminal&#x27;</span>)</span><br><span class="line">        <span class="comment">// 初始化终端对象</span></span><br><span class="line">        <span class="built_in">this</span>.term = <span class="keyword">new</span> Terminal(<span class="built_in">this</span>.terminal)</span><br><span class="line">        <span class="comment">// 打开这个对象</span></span><br><span class="line">        <span class="built_in">this</span>.term.open(terminalContainer)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> WebSocket(<span class="string">&#x27;ws://127.0.0.1:8000/webssh/&#x27;</span>)</span><br><span class="line">        <span class="built_in">this</span>.terminalSocket = <span class="keyword">new</span> WebSocket(<span class="string">&#x27;ws://127.0.0.1:8000/webssh/&#x27;</span>)</span><br><span class="line">        <span class="built_in">this</span>.terminalSocket.onopen = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 连接成功触发该方法</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;websocket is Connected...&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.terminalSocket.onclose = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 连接关闭适触发的方法</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;websocket is Closed...&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.terminalSocket.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 连接出错触发的方法</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;damn Websocket is broken!&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.term.attach(<span class="built_in">this</span>.terminalSocket)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>redis键空间事件</title>
      <link href="2018/12/18/redis%E9%94%AE%E7%A9%BA%E9%97%B4%E4%BA%8B%E4%BB%B6/"/>
      <url>2018/12/18/redis%E9%94%AE%E7%A9%BA%E9%97%B4%E4%BA%8B%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="启用键空间通知"><a href="#启用键空间通知" class="headerlink" title="启用键空间通知"></a>启用键空间通知</h2><ul><li><h4 id="默认情况下，禁用键空间事件通知，可以在redis-conf或redis-cli中启用"><a href="#默认情况下，禁用键空间事件通知，可以在redis-conf或redis-cli中启用" class="headerlink" title="默认情况下，禁用键空间事件通知，可以在redis.conf或redis-cli中启用"></a>默认情况下，禁用键空间事件通知，可以在redis.conf或redis-cli中启用</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Lenovo&gt; redis-cli config set notify-keyspace-events KEA</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p><code>该KEA字符串意味着每一个可能的事件被启用</code></p></li><li><h4 id="检查事件是否正常"><a href="#检查事件是否正常" class="headerlink" title="检查事件是否正常"></a>检查事件是否正常</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Lenovo&gt;redis-cli --csv psubscribe &#x27;*&#x27;</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">&quot;psubscribe&quot;,&quot;&#x27;*&#x27;&quot;,1</span><br></pre></td></tr></table></figure><p><code>psubscribe &#39;*&#39;意味着我们想要使用模式订阅所有事件*</code></p></li><li><h4 id="打开终端2输入-set-key1-value1"><a href="#打开终端2输入-set-key1-value1" class="headerlink" title="打开终端2输入 set key1 value1"></a>打开终端2输入 set key1 value1</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Lenovo&gt;redis-cli</span><br><span class="line">127.0.0.1:6379&gt; set key1 value1</span><br><span class="line">OK</span><br></pre></td></tr></table></figure></li><li><h4 id="再打开终端1会看到："><a href="#再打开终端1会看到：" class="headerlink" title="再打开终端1会看到："></a>再打开终端1会看到：</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Lenovo&gt;redis-cli --csv psubscribe <span class="string">&#x27;*&#x27;</span>     </span><br><span class="line">Reading messages... (press Ctrl-C to quit)  </span><br><span class="line"><span class="string">&quot;psubscribe&quot;</span>,<span class="string">&quot;*&quot;</span>,1</span><br><span class="line"><span class="string">&quot;pmessage&quot;</span>,<span class="string">&quot;*&quot;</span>,<span class="string">&quot;__keyspace@0__:key1&quot;</span>,<span class="string">&quot;set&quot;</span></span><br><span class="line"><span class="string">&quot;pmessage&quot;</span>,<span class="string">&quot;*&quot;</span>,<span class="string">&quot;__keyevent@0__:set&quot;</span>,<span class="string">&quot;key1</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="事件的类型"><a href="#事件的类型" class="headerlink" title="事件的类型"></a>事件的类型</h2><p>对于每个修改数据库的操作，键空间通知都会发送<strong>两种不同类型的事件</strong><br>比如说，对0号数据库的键 mykey 执行 DEL key [key …] 命令时，系统将分发两条消息，相当于执行以下两个 PUBLISH channel message 命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PUBLISH __keyspace@0__:mykey del</span><br><span class="line">PUBLISH __keyevent@0__:mykey zst</span><br></pre></td></tr></table></figure><blockquote><p><strong>keyspace@0</strong>:mykey 可以接收 0 号数据库中所有修改键 mykey 的事件<br><strong>keyevent@0</strong>:del 则可以接收 0 号数据库中所有执行 del 命令的键<br>以 keyspace 为前缀的频道被称为键空间通知<br>以 keyevent 为前缀的频道则被称为键事件通知</p></blockquote><h2 id="键空间配置"><a href="#键空间配置" class="headerlink" title="键空间配置"></a>键空间配置</h2><blockquote><p>因为开启键空间通知功能需要消耗一些CPU，所以在默认配置下，该功能处于关闭状态<br>可以通过修改 redis.conf 文件，或者直接使用 CONFIG SET 命令来开启或关闭键空间通知功能:</p></blockquote><ul><li>当 notify-keyspace-events 选项的参数为空字符串时，功能关闭</li><li>当参数不是空字符串时，功能开启</li></ul><h4 id="notify-keyspace-events-的参数可以是以下字符的任意组合，-它指定了服务器该发送哪些类型的通知："><a href="#notify-keyspace-events-的参数可以是以下字符的任意组合，-它指定了服务器该发送哪些类型的通知：" class="headerlink" title="notify-keyspace-events 的参数可以是以下字符的任意组合， 它指定了服务器该发送哪些类型的通知："></a>notify-keyspace-events 的参数可以是以下字符的任意组合， 它指定了服务器该发送哪些类型的通知：</h4><table><thead><tr><th>字符</th><th>通知</th></tr></thead><tbody><tr><td>K</td><td>键空间通知，所有通知以 <strong>keyspace@</strong> 为前缀</td></tr><tr><td>E</td><td>键事件通知，所有通知以 <strong>keyevent@</strong> 为前缀</td></tr><tr><td>g</td><td>DEL 、 EXPIRE 、 RENAME 等类型无关的通用命令的通知</td></tr><tr><td>$</td><td>字符串命令的通知</td></tr><tr><td>l</td><td>列表命令的通知</td></tr><tr><td>s</td><td>集合命令的通知</td></tr><tr><td>h</td><td>哈希命令的通知</td></tr><tr><td>z</td><td>有序集合命令的通知</td></tr><tr><td>x</td><td>过期事件：每当有过期键被删除时发送</td></tr><tr><td>e</td><td>驱逐(evict)事件：每当有键因为 maxmemory 政策而被删除时发送</td></tr><tr><td>A</td><td>参数 g$lshzxe 的别名，即all</td></tr></tbody></table><hr><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ul><li><h2 id="One"><a href="#One" class="headerlink" title="One"></a>One</h2><ul><li><h4 id="redis发布所有通知，客户端1001订阅所有消息"><a href="#redis发布所有通知，客户端1001订阅所有消息" class="headerlink" title="redis发布所有通知，客户端1001订阅所有消息"></a>redis发布所有通知，客户端1001订阅所有消息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; config set notify-keyspace-events KEA</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; psubscribe __key*@0__:*</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line"> &quot;psubscribe&quot;</span><br><span class="line"> &quot;__key*@0__:*&quot;</span><br><span class="line"> (integer) 1</span><br></pre></td></tr></table></figure></li><li><h4 id="在客户端1002上执行set和del命令"><a href="#在客户端1002上执行set和del命令" class="headerlink" title="在客户端1002上执行set和del命令"></a>在客户端1002上执行set和del命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set msg &quot;hi sister&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; del msg</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; del msg</span><br><span class="line">(integer) 0</span><br></pre></td></tr></table></figure></li><li><h4 id="客户端1001的内容如下"><a href="#客户端1001的内容如下" class="headerlink" title="客户端1001的内容如下"></a>客户端1001的内容如下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&quot;pmessage&quot;</span><br><span class="line">&quot;__key*@0__:*&quot;</span><br><span class="line">&quot;__keyspace@0__:msg&quot;</span><br><span class="line">&quot;set&quot;</span><br><span class="line">&quot;pmessage&quot;</span><br><span class="line">&quot;__key*@0__:*&quot;</span><br><span class="line">&quot;__keyevent@0__:set&quot;</span><br><span class="line">&quot;msg&quot;</span><br><span class="line">    </span><br><span class="line">&quot;pmessage&quot;</span><br><span class="line">&quot;__key*@0__:*&quot;</span><br><span class="line">&quot;__keyspace@0__:msg&quot;</span><br><span class="line">&quot;del&quot;</span><br><span class="line">&quot;pmessage&quot;</span><br><span class="line">&quot;__key*@0__:*&quot;</span><br><span class="line">&quot;__keyevent@0__:del&quot;</span><br><span class="line">&quot;msg&quot;</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">客户端1001收到了keyspace和keyevent消息</span><br></pre></td></tr></table></figure></li></ul></li><li><h2 id="Two"><a href="#Two" class="headerlink" title="Two"></a>Two</h2><ul><li><h4 id="redis仅发布keyspace通知，而客户端1001订阅所有消息类型"><a href="#redis仅发布keyspace通知，而客户端1001订阅所有消息类型" class="headerlink" title="redis仅发布keyspace通知，而客户端1001订阅所有消息类型"></a>redis仅发布keyspace通知，而客户端1001订阅所有消息类型</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; config set notify-keyspace-events KA</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; psubscribe __key*@0__:*</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line"> &quot;psubscribe&quot;</span><br><span class="line"> &quot;__key*@0__:*&quot;</span><br><span class="line"> (integer) 1</span><br></pre></td></tr></table></figure></li><li><h4 id="在客户端1002也执行以上操作，再来看客户端1001的内容"><a href="#在客户端1002也执行以上操作，再来看客户端1001的内容" class="headerlink" title="在客户端1002也执行以上操作，再来看客户端1001的内容"></a>在客户端1002也执行以上操作，再来看客户端1001的内容</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&quot;pmessage&quot;</span><br><span class="line">&quot;__key*@0__:*&quot;</span><br><span class="line">&quot;__keyspace@0__:msg&quot;</span><br><span class="line">&quot;set&quot;</span><br><span class="line">    </span><br><span class="line">&quot;pmessage&quot;</span><br><span class="line">&quot;__key*@0__:*&quot;</span><br><span class="line">&quot;__keyspace@0__:msg&quot;</span><br><span class="line">&quot;del&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">客户端1001订阅了所有消息，但是Redis仅发布了keyspace事件 在客户端1002上执行了两次del操作，只有第一个del成功执行了，从而产生了一个事件</span><br></pre></td></tr></table></figure></li></ul></li><li><h2 id="Three"><a href="#Three" class="headerlink" title="Three"></a>Three</h2><ul><li><h4 id="redis发布所有通知，客户端1001仅订阅keyspace消息"><a href="#redis发布所有通知，客户端1001仅订阅keyspace消息" class="headerlink" title="redis发布所有通知，客户端1001仅订阅keyspace消息"></a>redis发布所有通知，客户端1001仅订阅keyspace消息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; config set notify-keyspace-events KEA</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; psubscribe __keyspace@0__:*</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line"> &quot;psubscribe&quot;</span><br><span class="line"> &quot;__keyspace@0__:*&quot;</span><br><span class="line"> (integer) 1</span><br></pre></td></tr></table></figure></li><li><h4 id="在客户端1002也执行以上操作，再来看客户端1001的内容-1"><a href="#在客户端1002也执行以上操作，再来看客户端1001的内容-1" class="headerlink" title="在客户端1002也执行以上操作，再来看客户端1001的内容"></a>在客户端1002也执行以上操作，再来看客户端1001的内容</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> &quot;pmessage&quot;</span><br><span class="line"> &quot;__keyspace@0__:*&quot;</span><br><span class="line"> &quot;__keyspace@0__:msg&quot;</span><br><span class="line"> &quot;set&quot;</span><br><span class="line"></span><br><span class="line">&quot;pmessage&quot;</span><br><span class="line">&quot;__keyspace@0__:*&quot;</span><br><span class="line">&quot;__keyspace@0__:msg&quot;</span><br><span class="line">&quot;del&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">客户端1001收到了keyspace消息</span><br></pre></td></tr></table></figure></li></ul></li><li><h2 id="Four"><a href="#Four" class="headerlink" title="Four"></a>Four</h2><ul><li><h4 id="redis仅发布字符串特定类型的通知，客户端1001订阅所有类型的消息"><a href="#redis仅发布字符串特定类型的通知，客户端1001订阅所有类型的消息" class="headerlink" title="redis仅发布字符串特定类型的通知，客户端1001订阅所有类型的消息"></a>redis仅发布字符串特定类型的通知，客户端1001订阅所有类型的消息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; config set notify-keyspace-events KE$</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt;  psubscribe __key*@0__:*</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line"> &quot;psubscribe&quot;</span><br><span class="line"> &quot;__key*@0__:*&quot;</span><br><span class="line"> (integer) 1</span><br></pre></td></tr></table></figure></li><li><h4 id="在客户端1002上执行lpush、set和del命令"><a href="#在客户端1002上执行lpush、set和del命令" class="headerlink" title="在客户端1002上执行lpush、set和del命令"></a>在客户端1002上执行lpush、set和del命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lpush alist 1 2 3</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; set msg &quot;hello brother&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; del msg</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure></li><li><h4 id="客户端1001的内容如下-1"><a href="#客户端1001的内容如下-1" class="headerlink" title="客户端1001的内容如下"></a>客户端1001的内容如下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&quot;pmessage&quot;</span><br><span class="line">&quot;__key*@0__:*&quot;</span><br><span class="line">&quot;__keyspace@0__:msg&quot;</span><br><span class="line">&quot;set&quot;</span><br><span class="line"></span><br><span class="line">&quot;pmessage&quot;</span><br><span class="line">&quot;__key*@0__:*&quot;</span><br><span class="line">&quot;__keyevent@0__:set&quot;</span><br><span class="line">&quot;msg&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">针对字符串，产生了keyspace和keyevent类型的消息 针对列表的lpush命令并没有产生消息 del命令是非特定类型的命令，也没有产生消息</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>redis发布者订阅者模式</title>
      <link href="2018/12/16/redis%E5%8F%91%E5%B8%83%E8%80%85%E8%AE%A2%E9%98%85%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>2018/12/16/redis%E5%8F%91%E5%B8%83%E8%80%85%E8%AE%A2%E9%98%85%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="redis发布和订阅框架"><a href="#redis发布和订阅框架" class="headerlink" title="redis发布和订阅框架"></a>redis发布和订阅框架</h1><p>redis提供了发布订阅功能，可以用于消息的传输，redis的发布订阅机制包括三个部分，发布者，订阅者和redis服务器。<br><a href="https://i.loli.net/2021/02/01/lOLEp4U3ihwzZ9S.png"><img src="https://i.loli.net/2021/02/01/lOLEp4U3ihwzZ9S.png" alt="redis.png"></a></p><h1 id="redis发布订阅功能实现"><a href="#redis发布订阅功能实现" class="headerlink" title="redis发布订阅功能实现"></a>redis发布订阅功能实现</h1><p>提前打开两个redis窗口<br>一个是发信息 一个接收信息的</p><h2 id="发送信息"><a href="#发送信息" class="headerlink" title="发送信息"></a>发送信息</h2><p>redis采用了publish命令来发送命令的 其返回接收的数量和信息<br><a href="https://i.loli.net/2021/02/01/RyFibKA6agnJ12T.png"><img src="https://i.loli.net/2021/02/01/RyFibKA6agnJ12T.png" alt="360ea1f748b2b506692c1d0863b39b1.png"></a></p><h2 id="订阅的某个频道"><a href="#订阅的某个频道" class="headerlink" title="订阅的某个频道"></a>订阅的某个频道</h2><p>redis采用了subscribe命令来接收信息 以及接收到的信息 成功订阅了某个频道<br><a href="https://i.loli.net/2021/02/01/PYov63WG8uUihRE.png"><img src="https://i.loli.net/2021/02/01/PYov63WG8uUihRE.png" alt="e89b522e09fb6ec2746cf2c31c27ff6.png"></a></p><h2 id="模式匹配"><a href="#模式匹配" class="headerlink" title="模式匹配"></a>模式匹配</h2><p>模式匹配功能允许客户端订阅符合某个模式的频道，Redis采用PSUBSCRIBE<br>订阅符合某个模式所有频道.* .是匹配*后面跟着的频道</p><h3 id="发送"><a href="#发送" class="headerlink" title="发送"></a>发送</h3><p><a href="https://i.loli.net/2021/02/01/6wAEC7ePiU4ODzy.png"><img src="https://i.loli.net/2021/02/01/6wAEC7ePiU4ODzy.png" alt="发送.png"></a></p><h3 id="订阅"><a href="#订阅" class="headerlink" title="订阅"></a>订阅</h3><p><a href="https://i.loli.net/2021/02/01/zfxRFqnWi3NpU5g.png"><img src="https://i.loli.net/2021/02/01/zfxRFqnWi3NpU5g.png" alt="订阅.png"></a></p><h2 id="取消订阅"><a href="#取消订阅" class="headerlink" title="取消订阅"></a>取消订阅</h2><p>Redis采用UNSUBSCRIBE和PUNSUBSCRIBE命令取消订阅，其返回值与订阅类似。<br><a href="https://i.loli.net/2021/02/01/baW3KdIFClhLHXG.png"><img src="https://i.loli.net/2021/02/01/baW3KdIFClhLHXG.png" alt="取消订阅.png"></a><br>取消订阅就是 当前订阅的数量为0 客户端也会自动退出</p><h1 id="python实现redis发布者和订阅者"><a href="#python实现redis发布者和订阅者" class="headerlink" title="python实现redis发布者和订阅者"></a>python实现redis发布者和订阅者</h1><p>首先创建两个.py 文件 一个是发送 一个是订阅</p><h2 id="发布者代码如下"><a href="#发布者代码如下" class="headerlink" title="发布者代码如下"></a>发布者代码如下</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用进程池连接 redis</span></span><br><span class="line"><span class="comment"># host redis地址</span></span><br><span class="line"><span class="comment"># port 端口号</span></span><br><span class="line"><span class="comment"># db 数据库</span></span><br><span class="line"><span class="comment"># password 自己设置密码</span></span><br><span class="line">pool = redis.ConnectionPool(host=<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">                            port=<span class="number">6379</span>, db=<span class="number">0</span>,</span><br><span class="line">                            password=<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">r = redis.StrictRedis(connection_pool=pool)</span><br><span class="line"><span class="comment"># 连接进程池 速度快一些</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 发送信息</span></span><br><span class="line">    msg = <span class="built_in">input</span>(<span class="string">&quot;黄伍盈请发信息: &gt;&gt;&quot;</span>)</span><br><span class="line">    <span class="comment"># 如果输入over 停止信息</span></span><br><span class="line">    <span class="keyword">if</span> msg == <span class="string">&quot;over&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;停止发布&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    r.publish(<span class="string">&#x27;spub&#x27;</span>, msg)</span><br><span class="line">    <span class="comment"># 发送</span></span><br></pre></td></tr></table></figure><h2 id="订阅者代码如下"><a href="#订阅者代码如下" class="headerlink" title="订阅者代码如下"></a>订阅者代码如下</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用进程池连接 redis</span></span><br><span class="line"><span class="comment"># host redis地址</span></span><br><span class="line"><span class="comment"># port 端口号</span></span><br><span class="line"><span class="comment"># db 数据库</span></span><br><span class="line"><span class="comment"># password 自己设置密码</span></span><br><span class="line">pool = redis.ConnectionPool(host=<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">                            port=<span class="number">6379</span>, db=<span class="number">0</span>,</span><br><span class="line">                            password=<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">r = redis.StrictRedis(connection_pool=pool)</span><br><span class="line"><span class="comment"># 连接进程池 速度快一些</span></span><br><span class="line">p = r.pubsub()</span><br><span class="line"><span class="comment"># 接收redis频道</span></span><br><span class="line">p.subscribe(<span class="string">&quot;spub&quot;</span>, <span class="string">&quot;cctv1&quot;</span>)</span><br><span class="line"><span class="comment"># 接收信息 以及接收到的信息 成功订阅了某个频道</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> p.listen():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;黄伍盈订阅的信息 : %s &quot;</span> % item[<span class="string">&#x27;channel&#x27;</span>].decode())</span><br><span class="line">    <span class="keyword">if</span> item[<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;message&#x27;</span>:</span><br><span class="line">        data = item[<span class="string">&#x27;data&#x27;</span>].decode()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;From %s get message : %s&quot;</span> % (item[<span class="string">&#x27;channel&#x27;</span>].decode(), item[<span class="string">&#x27;data&#x27;</span>].decode()))</span><br><span class="line">        <span class="keyword">if</span> item[<span class="string">&#x27;data&#x27;</span>] == <span class="string">&#x27;over&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(item[<span class="string">&#x27;channel&#x27;</span>].decode(), <span class="string">&#x27;停止发布&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">p.unsubscribe(<span class="string">&#x27;spub&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;取消订阅&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="需要注意"><a href="#需要注意" class="headerlink" title="需要注意"></a>需要注意</h2><p>频道名必须一致 否则接收不到信息</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue 之 axios封装</title>
      <link href="2018/12/03/Vue%20%E4%B9%8B%20Axios%20%E5%B0%81%E8%A3%85/"/>
      <url>2018/12/03/Vue%20%E4%B9%8B%20Axios%20%E5%B0%81%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>在vue项目中，和后台交互获取数据这块，我们通常使用的是axios库，它是基于promise的http库，可运行在浏览器端和node.js中。<br>他有很多优秀的特性，例如拦截请求和响应、取消请求、转换json、客户端防御CSRF等。</p><h4 id="组件安装"><a href="#组件安装" class="headerlink" title="组件安装"></a>组件安装</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure><h4 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h4><p>通常我们会在src中，新建一个http文件夹，里边新建index.js和api.js文件，index.js文件用来封装我们的axios，api.js用来统一管理我们的接口</p><hr><h3 id="下面我们以登陆限制（是否登录）为例："><a href="#下面我们以登陆限制（是否登录）为例：" class="headerlink" title="下面我们以登陆限制（是否登录）为例："></a>下面我们以登陆限制（是否登录）为例：</h3><p>我们需要在index.js中做如下操作：</p><ul><li><h5 id="首先需要引入axios"><a href="#首先需要引入axios" class="headerlink" title="首先需要引入axios"></a>首先需要引入axios</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="comment">// 设置默认请求地址</span></span><br><span class="line">axios.defaults.baseURL = <span class="string">&#x27;http://127.0.0.1:8000/&#x27;</span></span><br><span class="line"><span class="comment">// 设置请求超时时限</span></span><br><span class="line">axios.defaults.timeout = <span class="number">10000</span></span><br></pre></td></tr></table></figure></li><li><h5 id="设置请求拦截"><a href="#设置请求拦截" class="headerlink" title="设置请求拦截"></a>设置请求拦截</h5><p>我们在发送请求前可以进行一个请求的拦截<br>比如，有些请求是需要用户登录之后才能访问的，或者post请求的时候，我们需要序列化我们提交的数据。<br>这时候，我们可以在请求被发送之前进行一个拦截，从而进行我们想要的操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求拦截器 当请求被发送之前进行我们想要的操作</span></span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 从localStorage中获取token</span></span><br><span class="line">  <span class="keyword">let</span> token = <span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;token&#x27;</span>);</span><br><span class="line">  <span class="comment">// 如果有token, 就把token设置到请求头中Authorization字段中</span></span><br><span class="line">  <span class="keyword">if</span> (token) &#123;</span><br><span class="line">    axios.defaults.headers[<span class="string">&#x27;Authorization&#x27;</span>] = token</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// token &amp;&amp; (config.headers.Authorization = token);</span></span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><h5 id="响应拦截"><a href="#响应拦截" class="headerlink" title="响应拦截"></a>响应拦截</h5><p>响应拦截器很好理解，就是服务器返回给我们的数据，我们在拿到之前可以对他进行一些处理。<br>例如下面的思想：如果后台返回的状态码是200，则正常返回数据，否则的根据错误的状态码类型进行一些我们需要的错误，<br>其实这里主要就是进行了错误的统一处理和没登录或登录过期后调整登录页的一个操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 响应拦截器（当后端返回数据的时候进行拦截）</span></span><br><span class="line">axios.interceptors.response.use(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 当响应码是 2xx 的情况, 进入这里</span></span><br><span class="line">  <span class="comment">// debugger</span></span><br><span class="line">  <span class="keyword">return</span> response.data;</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error.response)</span><br><span class="line">  <span class="comment">// 当响应码不是 2xx 的情况, 进入这里</span></span><br><span class="line">  <span class="comment">// debugger</span></span><br><span class="line">  <span class="keyword">return</span> error</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><h5 id="根据上面封装好的axios对象，封装-get、post、put、delete请求"><a href="#根据上面封装好的axios对象，封装-get、post、put、delete请求" class="headerlink" title="根据上面封装好的axios对象，封装 get、post、put、delete请求"></a>根据上面封装好的axios对象，封装 get、post、put、delete请求</h5><ul><li><h6 id="封装get方法-对应get请求"><a href="#封装get方法-对应get请求" class="headerlink" title="封装get方法,对应get请求"></a>封装get方法,对应get请求</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">url, params, headers</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    axios.get(url, &#123;params, headers&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(res)</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      reject(err)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><h6 id="封装post方法-对应post请求"><a href="#封装post方法-对应post请求" class="headerlink" title="封装post方法,对应post请求"></a>封装post方法,对应post请求</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">post</span>(<span class="params">url, params</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    axios.post(url, params).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      resolve(res)</span><br><span class="line">    &#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// debugger</span></span><br><span class="line">      reject(err)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h6 id="封装put方法-对应put请求"><a href="#封装put方法-对应put请求" class="headerlink" title="封装put方法,对应put请求"></a>封装put方法,对应put请求</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">put</span>(<span class="params">url, params, headers</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    axios.put(url, params, headers).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      resolve(res)</span><br><span class="line">    &#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// debugger</span></span><br><span class="line">      reject(err)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>封装delete方法,对应delete请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">del</span>(<span class="params">url, params, headers</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    axios.delete(url, &#123;<span class="attr">data</span>: params, headers&#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      resolve(res)</span><br><span class="line">    &#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// debugger</span></span><br><span class="line">      reject(err)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h4 id="以上为axios的封装，下面为api的统一管理"><a href="#以上为axios的封装，下面为api的统一管理" class="headerlink" title="以上为axios的封装，下面为api的统一管理"></a>以上为axios的封装，下面为api的统一管理</h4><ul><li><h5 id="首先在api-js里面导入我们封装的方法"><a href="#首先在api-js里面导入我们封装的方法" class="headerlink" title="首先在api.js里面导入我们封装的方法"></a>首先在api.js里面导入我们封装的方法</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;get, post, put, del&#125; <span class="keyword">from</span> <span class="string">&#x27;./index&#x27;</span></span><br></pre></td></tr></table></figure></li><li><h5 id="现在比如我们要注册一个账号，是post请求-我们可以再api中这样封装"><a href="#现在比如我们要注册一个账号，是post请求-我们可以再api中这样封装" class="headerlink" title="现在比如我们要注册一个账号，是post请求,我们可以再api中这样封装"></a>现在比如我们要注册一个账号，是post请求,我们可以再api中这样封装</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> signUp = <span class="function"><span class="params">parameter</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 注册</span></span><br><span class="line">  <span class="keyword">return</span> post(</span><br><span class="line">    <span class="comment">// baseURL后拼接的路由 </span></span><br><span class="line">    <span class="string">&#x27;signup/&#x27;</span>,</span><br><span class="line">    <span class="comment">// post携带的data数据</span></span><br><span class="line">    parameter</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><h5 id="然后我们可以在页面中这样调用我们的api接口"><a href="#然后我们可以在页面中这样调用我们的api接口" class="headerlink" title="然后我们可以在页面中这样调用我们的api接口"></a>然后我们可以在页面中这样调用我们的api接口</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">signUp</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">let</span> params = &#123;</span><br><span class="line">        <span class="string">&quot;email&quot;</span>: <span class="built_in">this</span>.signup_email,</span><br><span class="line">        <span class="string">&quot;username&quot;</span>: <span class="built_in">this</span>.signup_username,</span><br><span class="line">        <span class="string">&quot;phone&quot;</span>: <span class="built_in">this</span>.signup_phone,</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span>: <span class="built_in">this</span>.signup_password,</span><br><span class="line">      &#125;</span><br><span class="line">      signUp(params).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (res.code == <span class="number">10004</span>) &#123;</span><br><span class="line">          <span class="built_in">this</span>.signup_errors = res.msg  <span class="comment">//10004注册失败</span></span><br><span class="line">          <span class="built_in">console</span>.log(<span class="built_in">this</span>.signup_errors.email[<span class="number">0</span>])</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (res.code == <span class="number">10001</span>) &#123;</span><br><span class="line">          <span class="built_in">this</span>.signup_errors = <span class="string">&#x27;&#x27;</span>  <span class="comment">//初始化错误信息</span></span><br><span class="line">          <span class="built_in">this</span>.message = res.msg  <span class="comment">//10001注册成功</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(error)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Celery的使用</title>
      <link href="2018/10/20/celery%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>2018/10/20/celery%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="Celery的定义："><a href="#Celery的定义：" class="headerlink" title="Celery的定义："></a>Celery的定义：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Celery（芹菜）是一个简单、灵活且可靠的，处理大量消息的分布式系统，并且提供维护这样一个系统的必需工具,Celery支持使用任务队列的方式在分布的机器、进程、线程上执行任务调度。</span><br></pre></td></tr></table></figure><h4 id="celery的架构："><a href="#celery的架构：" class="headerlink" title="celery的架构："></a>celery的架构：</h4><ul><li><p><strong>消息中间件</strong></p><p><strong>Celery</strong>本身不提供消息服务，但是可以方便的和第三方提供的消息中间件集成，包括，<strong>Redis</strong>等，这里我先去了解<strong>Redis</strong></p></li><li><p><strong>任务执行单元</strong></p><p>Worker是Celery提供的任务执行的单元，worker并发的运行在分布式的系统节点中</p></li><li><p><strong>任务结果存储</strong></p><p>Task result store用来存储Worker执行的任务的结果，Celery支持以不同方式存储任务的结果，包括Redis，MongoDB，Django ORM，AMQP等，这里我先不去看它是如何存储的，就先选用Redis来存储任务执行结果</p></li></ul><h3 id="需要的安装包："><a href="#需要的安装包：" class="headerlink" title="需要的安装包："></a>需要的安装包：</h3><ul><li><p>pip3 install Django==2.2.1</p></li><li><p>pip3 install celery==4.4.7</p></li><li><p>pip install redis=3.5.3</p></li></ul><h3 id="以手机验证为例的相关代码"><a href="#以手机验证为例的相关代码" class="headerlink" title="以手机验证为例的相关代码"></a>以手机验证为例的相关代码</h3><p><strong>在settings中的INSTALLED_APPS里配置djcelery以及消息列队的地址</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># settings.py</span></span><br><span class="line"><span class="keyword">import</span> djcelery</span><br><span class="line"></span><br><span class="line">djcelery.setup_loader()</span><br><span class="line">BROKER_URL = <span class="string">&#x27;redis://**.**.**.**:6379&#x27;</span>  <span class="comment"># 这就是broker消息队列的地址</span></span><br></pre></td></tr></table></figure><h5 id="在APP目录下-创建tasks-py文件"><a href="#在APP目录下-创建tasks-py文件" class="headerlink" title="在APP目录下 创建tasks.py文件"></a>在APP目录下 创建tasks.py文件</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tasks.py</span></span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> task</span><br><span class="line"><span class="keyword">from</span> ronglian_sms_sdk <span class="keyword">import</span> SmsSDK</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SMSinit</span>(<span class="params">ACCOUNT_SID, AUTH_TOKEN, APP_ID</span>):</span></span><br><span class="line">    <span class="keyword">return</span> SmsSDK(ACCOUNT_SID, AUTH_TOKEN, APP_ID)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SMSsend</span>(<span class="params">sms, tid=<span class="number">1</span>, mobile=[], datas=[]</span>):</span>  <span class="comment"># .delay</span></span><br><span class="line">    <span class="comment"># 升级成为异步方法</span></span><br><span class="line">    tid = tid  <span class="comment"># 登录验证模版 默认ID为1</span></span><br><span class="line">    mobile = <span class="string">&#x27;,&#x27;</span>.join(mobile) <span class="keyword">if</span> <span class="built_in">len</span>(mobile) &gt; <span class="number">1</span> <span class="keyword">else</span> mobile[<span class="number">0</span>]  <span class="comment"># 接收的手机号列表</span></span><br><span class="line">    datas = datas</span><br><span class="line">    resp = sms.sendMessage(tid, mobile, datas)</span><br></pre></td></tr></table></figure><h5 id="在APP目录下创建utils-py文件"><a href="#在APP目录下创建utils-py文件" class="headerlink" title="在APP目录下创建utils.py文件"></a>在APP目录下创建utils.py文件</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># utils.py</span></span><br><span class="line"><span class="keyword">from</span> ronglian_sms_sdk <span class="keyword">import</span> SmsSDK</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SMS</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, ACCOUNT_SID, AUTH_TOKEN, APP_ID</span>):</span></span><br><span class="line">        self.sdk = SmsSDK(ACCOUNT_SID, AUTH_TOKEN, APP_ID)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send</span>(<span class="params">self, tid=<span class="number">1</span>, mobile=[], datas=[]</span>):</span></span><br><span class="line">        time.sleep(<span class="number">5</span>)</span><br><span class="line">        tid = tid  <span class="comment"># 登录验证模版 默认ID为1</span></span><br><span class="line">        mobile = <span class="string">&#x27;,&#x27;</span>.join(mobile) <span class="keyword">if</span> <span class="built_in">len</span>(mobile) &gt; <span class="number">1</span> <span class="keyword">else</span> mobile[<span class="number">0</span>]  <span class="comment"># 接收的手机号列表</span></span><br><span class="line">        datas = datas</span><br><span class="line">        resp = self.sdk.sendMessage(tid, mobile, datas)</span><br></pre></td></tr></table></figure><h5 id="手机号发送验证码"><a href="#手机号发送验证码" class="headerlink" title="手机号发送验证码"></a>手机号发送验证码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># view.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhoneSMS</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        phone = request.data.get(<span class="string">&#x27;phone&#x27;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            User.objects.get(phone=phone)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;</span><br><span class="line">                <span class="string">&#x27;code&#x27;</span>: <span class="number">400</span>,</span><br><span class="line">                <span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;用户不存在，无法发送&#x27;</span></span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># sms = SMS(ACCOUNT_SID, AUTH_TOKEN, APP_ID)</span></span><br><span class="line">            sms = SMSinit(ACCOUNT_SID, AUTH_TOKEN, APP_ID)</span><br><span class="line">            code = random_code(<span class="number">6</span>)</span><br><span class="line">            r.<span class="built_in">set</span>(phone, code, <span class="number">60</span>)</span><br><span class="line">            datas = [code, <span class="string">&#x27;60s&#x27;</span>]</span><br><span class="line">            <span class="comment"># sms.send(mobile=[phone], datas=datas)</span></span><br><span class="line">            SMSsend.delay(sms, mobile=[phone], datas=datas)</span><br><span class="line">            <span class="comment"># 直接加入消息队列，由celery去管理</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> Response(&#123;</span><br><span class="line">                <span class="string">&#x27;code&#x27;</span>: <span class="number">200</span>,</span><br><span class="line">                <span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;验证码已发送&#x27;</span></span><br><span class="line">            &#125;)</span><br></pre></td></tr></table></figure><h5 id="最后启动（注意要保证redis为开启状态）"><a href="#最后启动（注意要保证redis为开启状态）" class="headerlink" title="最后启动（注意要保证redis为开启状态）"></a>最后启动（注意要保证redis为开启状态）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py celery worker</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>支付宝三方支付</title>
      <link href="2018/10/08/%E6%94%AF%E4%BB%98%E5%AE%9D%E4%B8%89%E6%96%B9%E6%94%AF%E4%BB%98/"/>
      <url>2018/10/08/%E6%94%AF%E4%BB%98%E5%AE%9D%E4%B8%89%E6%96%B9%E6%94%AF%E4%BB%98/</url>
      
        <content type="html"><![CDATA[<ul><li>创建应用<ul><li>线上环境需要创建应用，因为我们不是企业，没有资质，所以只能申请沙箱环境</li><li>简单来讲沙箱环境就是给开发者使用的测试环境</li></ul></li><li>按照官方要求生成秘钥</li><li>把生成的APP公钥粘贴到沙箱环境的APP中</li></ul><h4 id="创建支付宝沙箱环境"><a href="#创建支付宝沙箱环境" class="headerlink" title="创建支付宝沙箱环境"></a>创建支付宝沙箱环境</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;openhome.alipay.com&#x2F;platform&#x2F;appDaily.htm?tab&#x3D;info</span><br></pre></td></tr></table></figure><h4 id="查看支付宝开发者文档"><a href="#查看支付宝开发者文档" class="headerlink" title="查看支付宝开发者文档"></a>查看支付宝开发者文档</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;openhome.alipay.com&#x2F;developmentDocument.htm</span><br></pre></td></tr></table></figure><h4 id="支付宝三方支付包"><a href="#支付宝三方支付包" class="headerlink" title="支付宝三方支付包"></a>支付宝三方支付包</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install python-alipay-sdk==<span class="number">1.10</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><h4 id="支付流程"><a href="#支付流程" class="headerlink" title="支付流程"></a>支付流程</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> alipay <span class="keyword">import</span> AliPay</span><br><span class="line"><span class="keyword">from</span> alipay.utils <span class="keyword">import</span> AliPayConfig</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlipayView</span>(<span class="params">APIView</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        sn = request.data.get(<span class="string">&quot;sn&quot;</span>)</span><br><span class="line">        total = request.data.get(<span class="string">&quot;total&quot;</span>)</span><br><span class="line"></span><br><span class="line">        app_private_key_string = <span class="built_in">open</span>(<span class="string">&quot;buyapp/alipay/app_private_key.txt&quot;</span>).read()</span><br><span class="line">        alipay_public_key_string = <span class="built_in">open</span>(<span class="string">&quot;buyapp/alipay/alipay_public_key.txt&quot;</span>).read()</span><br><span class="line"></span><br><span class="line">        alipay = AliPay(</span><br><span class="line">            appid=<span class="string">&quot;2016101600696807&quot;</span>,</span><br><span class="line">            app_notify_url=<span class="literal">None</span>,  <span class="comment"># 默认回调url</span></span><br><span class="line">            app_private_key_string=app_private_key_string,</span><br><span class="line">            <span class="comment"># 支付宝的公钥，验证支付宝回传消息使用，不是你自己的公钥,</span></span><br><span class="line">            alipay_public_key_string=alipay_public_key_string,</span><br><span class="line">            sign_type=<span class="string">&quot;RSA2&quot;</span>,  <span class="comment"># RSA 或者 RSA2</span></span><br><span class="line">            debug=<span class="literal">True</span>,  <span class="comment"># 默认False</span></span><br><span class="line">            config=AliPayConfig(timeout=<span class="number">15</span>)  <span class="comment"># 可选, 请求超时时间</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果你是 Python 3的用户，使用默认的字符串即可</span></span><br><span class="line">        subject = <span class="string">&quot;美多商城订单支付&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 电脑网站支付，需要跳转到https://openapi.alipay.com/gateway.do? + order_string</span></span><br><span class="line">        order_string = alipay.api_alipay_trade_page_pay(</span><br><span class="line">            out_trade_no=sn,  <span class="comment"># 订单号</span></span><br><span class="line">            total_amount=total,  <span class="comment"># 总金额</span></span><br><span class="line">            subject=subject,  <span class="comment"># 标题</span></span><br><span class="line">            return_url=<span class="string">&quot;http://localhost:8000/api/v1/buy/pay_callback&quot;</span>,</span><br><span class="line">            <span class="comment"># notify_url=&quot;https://example.com/notify&quot;  # 可选, 不填则使用默认notify url</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 生成一个支付超链接，返回给vue端， 点击就激活这个超链接</span></span><br><span class="line">        url = <span class="string">&quot;https://openapi.alipaydev.com/gateway.do?&quot;</span> + order_string</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&quot;url&quot;</span>: url&#125;)</span><br></pre></td></tr></table></figure><h4 id="回调结果"><a href="#回调结果" class="headerlink" title="回调结果"></a>回调结果</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AliPayBackView</span>(<span class="params">View</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        user = request.user</span><br><span class="line">        <span class="comment"># 获取回调的信息</span></span><br><span class="line">        <span class="comment"># 获取 订单号</span></span><br><span class="line">        sn = request.GET.get(<span class="string">&quot;out_trade_no&quot;</span>)</span><br><span class="line">        <span class="comment">#  获取 支付宝交易号</span></span><br><span class="line">        trade_no = request.GET.get(<span class="string">&quot;trade_no&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;sn:&quot;</span>, sn)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;trade_no:&quot;</span>, trade_no)</span><br><span class="line">        <span class="comment"># 找到这个订单 并更新状态</span></span><br><span class="line">        <span class="comment"># 修改了  订单状态  并添加了 支付宝交易号</span></span><br><span class="line">        Order.objects.<span class="built_in">filter</span>(sn=sn).update(trade_no=trade_no, status=<span class="number">2</span>)</span><br><span class="line">        <span class="comment">#  删除我们购物车中的 已经支付成功的购物信息</span></span><br><span class="line">        <span class="built_in">print</span>(user)</span><br><span class="line">        <span class="comment"># 查询所有的选中 然后删除</span></span><br><span class="line">        gid_set = r.smembers(<span class="string">&quot;select_%d&quot;</span> % user.<span class="built_in">id</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;gid_set:&quot;</span>, gid_set)</span><br><span class="line">        <span class="keyword">for</span> gid <span class="keyword">in</span> gid_set:</span><br><span class="line">            r.hdel(<span class="string">&quot;cart_%d&quot;</span> % user.<span class="built_in">id</span>, gid)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;http://127.0.0.1:8080/#/paysuccess?trade_no=&quot;</span> + trade_no)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>微博三方登录</title>
      <link href="2018/10/01/%E5%BE%AE%E5%8D%9A%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/"/>
      <url>2018/10/01/%E5%BE%AE%E5%8D%9A%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">先通过注册的微博拿到 App Key 和 App Secret</span><br><span class="line">填写回调地址</span><br></pre></td></tr></table></figure><p>请求方式和URL：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET&#x2F;POST   https:&#x2F;&#x2F;api.weibo.com&#x2F;oauth2&#x2F;authorize</span><br></pre></td></tr></table></figure><p>前端的扫码地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;api.weibo.com&#x2F;oauth2&#x2F;authorize?</span><br><span class="line">            client_id&#x3D;1968976007&amp;</span><br><span class="line">            redirect_uri&#x3D;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;wb_return_url&quot;&gt;微博登录&lt;&#x2F;a&gt;</span><br><span class="line">            &lt;!-- client_id是App Key --&gt;</span><br><span class="line">            &lt;!-- redirect_url是填写的回调地址 --&gt;</span><br></pre></td></tr></table></figure><p>前端页面接收这个 code 然后发送给后台 Django</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">    &#123;&#123;message&#125;&#125;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &#39;axios&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">data() &#123;</span><br><span class="line">            return&#123;</span><br><span class="line">                message:&#39;&#39;,</span><br><span class="line">                code:this.$route.query.code</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted() &#123;</span><br><span class="line">            var code &#x3D; this.$route.query.code;</span><br><span class="line">            var form_data &#x3D; new FormData();</span><br><span class="line">            form_data.append(&#39;code&#39;, code);</span><br><span class="line">            console.log(code);</span><br><span class="line">            axios(&#123;</span><br><span class="line">                &#39;url&#39;: &#39;&#x2F;get_weibo_code&#x2F;&#39;,</span><br><span class="line">                &#39;method&#39;: &#39;post&#39;,</span><br><span class="line">                &#39;data&#39;: form_data</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>接收 微博回调页面 发送的 code</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Get_WeiBo_Code(APIView):</span><br><span class="line">    def post(self, request):</span><br><span class="line">        code &#x3D; request.data[&#39;code&#39;]</span><br><span class="line">        print(code)</span><br><span class="line">        # 通过 code 获取授权的 access_token</span><br><span class="line">        access_token &#x3D; get_weibo_accesstoken(code)</span><br><span class="line">        uid &#x3D; get_weibo_userinfo(access_token)</span><br></pre></td></tr></table></figure><p>通过 授权过的 token 获取 Access_token</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">def get_weibo_accesstoken(code):</span><br><span class="line">    # 获取 access_token 的必要参数 ↓</span><br><span class="line">    url &#x3D; &#39;https:&#x2F;&#x2F;api.weibo.com&#x2F;oauth2&#x2F;access_token&#39;</span><br><span class="line">    data &#x3D; &#123;</span><br><span class="line">        &#39;client_id&#39;: &#39; &#39;,  # 创建应用的 App Key</span><br><span class="line">        &#39;client_secret&#39;: &#39; &#39;,  # 创建应用的 App Secret</span><br><span class="line">        &#39;grant_type&#39;: &#39;authorization_code&#39;,  # 文档 写死</span><br><span class="line">        &#39;redirect_uri&#39;: &#39; &#39;,  # 回调地址</span><br><span class="line">        &#39;code&#39;: code  # 接收到的编码</span><br><span class="line">    &#125;</span><br><span class="line">    # 构造 post 对 weibo 的 url 发起请求</span><br><span class="line">    res &#x3D; requests.post(url&#x3D;url, data&#x3D;data).text</span><br><span class="line">        # 得到请求转换为 字典 然后 取 键</span><br><span class="line">    return json.loads(res)[&#39;access_token&#39;]</span><br></pre></td></tr></table></figure><p>查询 Access_token 的相关信息 (获取 微博 唯一标识符 uid)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def get_weibo_userinfo(access_token):</span><br><span class="line">    url &#x3D; &#39;https:&#x2F;&#x2F;api.weibo.com&#x2F;oauth2&#x2F;get_token_info&#39;</span><br><span class="line">    data &#x3D; &#123;</span><br><span class="line">        &#39;access_token&#39;: access_token,</span><br><span class="line">    &#125;</span><br><span class="line">    res &#x3D; requests.post(url&#x3D;url, data&#x3D;data).text</span><br><span class="line">    return json.loads(res)[&#39;uid&#39;]</span><br></pre></td></tr></table></figure><p>model表</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Social(models.Model):</span><br><span class="line">    uid = models.CharField(max_length=<span class="number">100</span>, verbose_name=<span class="string">&#x27;uid&#x27;</span>)</span><br><span class="line">    user = models.ForeignKey(<span class="string">&#x27;User&#x27;</span>, on_delete=models.CASCADE)</span><br><span class="line"></span><br><span class="line">    THIRD_PARTY_CHOICE = &#123;</span><br><span class="line">         (<span class="number">1</span>, <span class="string">&#x27;QQ&#x27;</span>),</span><br><span class="line">         (<span class="number">2</span>, <span class="string">&#x27;微信&#x27;</span>),</span><br><span class="line">         (<span class="number">3</span>, <span class="string">&#x27;微博&#x27;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">    third_party = models.IntegerField(choices=THIRD_PARTY_CHOICE)</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        <span class="keyword">return</span> self.user.name</span><br></pre></td></tr></table></figure><p>判断 用户之前 是否绑定过 微博，绑定过 就直接登录，没绑定过 重新 绑定一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">class Get_WeiBo_Code(APIView):</span><br><span class="line">    def post(self, request):</span><br><span class="line">        code = request.data[<span class="string">&#x27;code&#x27;</span>]</span><br><span class="line">        print(code)</span><br><span class="line">        # 通过 code 获取授权的 access_token</span><br><span class="line">        access_token = get_weibo_accesstoken(code)</span><br><span class="line">        uid = get_weibo_userinfo(access_token)</span><br><span class="line">        # 从数据库 取 数据判断 用户是否 注册过</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            s = models.Social.objects.get(</span><br><span class="line">                third_party=3,  # 直接绑定微博</span><br><span class="line">                uid=uid</span><br><span class="line">            )</span><br><span class="line">        except:</span><br><span class="line">            # 当 抛出异常就代表没有（微博用户）</span><br><span class="line">            # 给出对应的 数据</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;</span><br><span class="line">                <span class="string">&#x27;code&#x27;</span>: <span class="string">&#x27;10030&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;用户不存在，请绑定本站&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;uid&#x27;</span>: uid</span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            # 没有 异常 代表曾经注册过</span><br><span class="line">            # 生成 token 保存登录状态</span><br><span class="line">            data = &#123;</span><br><span class="line">                <span class="string">&#x27;id&#x27;</span>: s.user.id,</span><br><span class="line">                <span class="string">&#x27;email&#x27;</span>: s.user.email</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            jwt_token = t.dumps(data).decode()</span><br><span class="line">            # 发送到前台</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;</span><br><span class="line">                <span class="string">&#x27;code&#x27;</span>: <span class="number">200</span>,</span><br><span class="line">                <span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;您是本站的老用户&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;token&#x27;</span>: jwt_token,</span><br><span class="line">                <span class="string">&#x27;email&#x27;</span>: s.user.email</span><br><span class="line">            &#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue父子间通信</title>
      <link href="2018/09/06/Vue%E7%88%B6%E5%AD%90%E9%97%B4%E9%80%9A%E4%BF%A1/"/>
      <url>2018/09/06/Vue%E7%88%B6%E5%AD%90%E9%97%B4%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><h2 id="什么是组件？"><a href="#什么是组件？" class="headerlink" title="什么是组件？"></a>什么是组件？</h2><p>组件是Vue最强大的功能之一。组件可以扩展 HTML 元素，封装可重用的代码，在较高层面上，组件是自定义元素，Vue. 的编译器为它添加特殊功能。在有些情况下，组件也可以表现为用 is 特性进行了扩展的原生 HTML 元素。<br>所有的 Vue 组件同时也都是 Vue 的实例，所以可接受相同的选项对象 (除了一些根级特有的选项) 并提供相同的生命周期钩子。</p><h1 id="父子组件通信"><a href="#父子组件通信" class="headerlink" title="父子组件通信"></a>父子组件通信</h1><ul><li><h2 id="父组件-Father-vue"><a href="#父组件-Father-vue" class="headerlink" title="父组件 Father.vue"></a>父组件 Father.vue</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;parent&quot;</span>&gt;</span><br><span class="line">    我是父组件</span><br><span class="line">    &lt;son :msg=<span class="string">&quot;msg&quot;</span> @say=<span class="string">&quot;fatherSay&quot;</span>&gt;&lt;/son&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> Son <span class="keyword">from</span> <span class="string">&#x27;./Son&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg: <span class="string">&#x27;你好啊，儿子&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   methods: &#123;</span><br><span class="line">      <span class="comment">// 参数就是子组件传递出来的数据</span></span><br><span class="line">      <span class="function"><span class="title">fatherSay</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(msg) <span class="comment">// 你好啊，父亲</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components:&#123;</span><br><span class="line">      son:Son</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li><h2 id="子组件-Son-vue"><a href="#子组件-Son-vue" class="headerlink" title="子组件 Son.vue"></a>子组件 Son.vue</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;son&quot;</span> @click=<span class="string">&quot;say&quot;</span>&gt;</span><br><span class="line">      我是子组件</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        父组件说：&#123;&#123;msg&#125;&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">//父组件通过props属性传递进来的数据</span></span><br><span class="line">      props: &#123;</span><br><span class="line">          msg: &#123;</span><br><span class="line">              type: <span class="built_in">String</span>,</span><br><span class="line">              <span class="keyword">default</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      data () &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            SonSay: <span class="string">&#x27;你好啊，父亲&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      methods: &#123;</span><br><span class="line">          <span class="comment">// 子组件通过emit方法触发父组件中定义好的函数，从而将子组件中的数据传递给父组件</span></span><br><span class="line">          <span class="function"><span class="title">say</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">              <span class="built_in">this</span>.$emit(<span class="string">&#x27;say&#x27;</span> , <span class="built_in">this</span>.SonSay);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果:"></a>结果:</h2><blockquote><p>我是父组件<br>我是子组件<br>父组件说：你好啊，儿子</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h2><blockquote><p>父组件通过prop给子组件下发数据，子组件通过$emit触发事件给父组件发送消息，即 prop 向下传递，事件向上传递。</p></blockquote></li></ul><h1 id="子父组件通信"><a href="#子父组件通信" class="headerlink" title="子父组件通信"></a>子父组件通信</h1><ul><li><h3 id="第一种方法：直接在子组件中通过this-parent-event来调用父组件的方法"><a href="#第一种方法：直接在子组件中通过this-parent-event来调用父组件的方法" class="headerlink" title="第一种方法：直接在子组件中通过this.$parent.event来调用父组件的方法"></a>第一种方法：直接在子组件中通过this.$parent.event来调用父组件的方法</h3><ul><li><p>父组件 Father1.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;Son1&gt;&lt;/Son1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> Son1 <span class="keyword">from</span> <span class="string">&#x27;./Son1&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    components:&#123;</span><br><span class="line">        Son1</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        <span class="function"><span class="title">father1_z</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;子组件给父组件传的值：聪明50%&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br></pre></td></tr></table></figure><ul><li>子组件 Son1.vue</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;button @click=<span class="string">&quot;son1_z()&quot;</span>&gt;点击传值给父组件&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    methods:&#123;</span><br><span class="line">        <span class="function"><span class="title">son1_z</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.$parent.father1_z()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><ul><li><h3 id="第二种方法：在子组件里用-emit向父组件触发一个事件，父组件监听这个事件就行了"><a href="#第二种方法：在子组件里用-emit向父组件触发一个事件，父组件监听这个事件就行了" class="headerlink" title="第二种方法：在子组件里用$emit向父组件触发一个事件，父组件监听这个事件就行了"></a>第二种方法：在子组件里用$emit向父组件触发一个事件，父组件监听这个事件就行了</h3><ul><li>父组件 Father2.vue</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;father2&quot;</span>&gt;</span><br><span class="line">    &lt;son2 @son2=<span class="string">&#x27;father2_z&#x27;</span>&gt;&lt;/son2&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> Son2 <span class="keyword">from</span> <span class="string">&#x27;./Son2&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        Son2</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        <span class="function"><span class="title">father2_z</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>子组件 Son2.vue</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;son2&quot;</span>&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;toFather2&quot;</span>&gt;点击传值给父组件&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">      <span class="function"><span class="title">toFather2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="built_in">this</span>.$emit(<span class="string">&#x27;son2&#x27;</span>,<span class="string">&#x27;子组件给父组件传的值：不赖呀，90%&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li><h3 id="第三种方法：父组件把方法传入子组件中，在子组件里直接调用这个方法"><a href="#第三种方法：父组件把方法传入子组件中，在子组件里直接调用这个方法" class="headerlink" title="第三种方法：父组件把方法传入子组件中，在子组件里直接调用这个方法"></a>第三种方法：父组件把方法传入子组件中，在子组件里直接调用这个方法</h3><ul><li>父组件 Father3.vue</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;son3 :father3_z=<span class="string">&#x27;father3_z&#x27;</span>&gt;&lt;/son3&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> Son3 <span class="keyword">from</span> <span class="string">&#x27;./Son3&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        Son3</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        <span class="function"><span class="title">father3_z</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;哎妈呀，您已突破聪明的极限&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>子组件 Son3.vue</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;son3_z()&quot;</span>&gt;点击传值给父组件&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    props: &#123;</span><br><span class="line">      father3_z: &#123;</span><br><span class="line">        type: <span class="built_in">Function</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      <span class="function"><span class="title">son3_z</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.father3_z) &#123;</span><br><span class="line">          <span class="built_in">this</span>.father3_z();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue路由钩子</title>
      <link href="2018/08/20/Vue%E8%B7%AF%E7%94%B1%E9%92%A9%E5%AD%90/"/>
      <url>2018/08/20/Vue%E8%B7%AF%E7%94%B1%E9%92%A9%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<h3 id="一、定义："><a href="#一、定义：" class="headerlink" title="一、定义："></a>一、定义：</h3><blockquote><p>路由钩子函数就是在发生路由跳转时，在每个时机调用的函数</p></blockquote><h3 id="二、分类："><a href="#二、分类：" class="headerlink" title="二、分类："></a>二、分类：</h3><h4 id="1-全局钩子函数"><a href="#1-全局钩子函数" class="headerlink" title="1.全局钩子函数"></a>1.全局钩子函数</h4><ul><li><p>全局钩子函数有两个：beforeEach 和 afterEach，由路由实例调用执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ① beforeEach</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//to：路由跳转目标路由对象</span></span><br><span class="line"><span class="comment">//from：路由跳转离开路由对象。</span></span><br><span class="line"><span class="comment">//next：是一个function，必须被执行，否则不会进行路由跳转，如果next(false)，同样不会执行跳转。next()参数为url路径，则会发生重定向</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ② afterEach</span></span><br><span class="line">router.afterEach(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">document</span>.title = to.meta.title || <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="2-某个路由独享的钩子函数"><a href="#2-某个路由独享的钩子函数" class="headerlink" title="2.某个路由独享的钩子函数"></a>2.某个路由独享的钩子函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router(&#123;</span><br><span class="line">    routes: [</span><br><span class="line">        &#123;</span><br><span class="line">            path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">            component: index,</span><br><span class="line">            meta: &#123;<span class="attr">title</span>: <span class="string">&#x27;首页&#x27;</span>&#125;,</span><br><span class="line">            <span class="function"><span class="title">beforeEnter</span>(<span class="params">to, <span class="keyword">from</span>, next</span>)</span> &#123;</span><br><span class="line">              next()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            path: <span class="string">&#x27;/xxx&#x27;</span>,</span><br><span class="line">            name: <span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">            component: About,</span><br><span class="line">            meta: &#123;</span><br><span class="line">              title: <span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">              auth: <span class="literal">true</span> <span class="comment">// 该路由需要登录权限</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="3-组件内的钩子函数"><a href="#3-组件内的钩子函数" class="headerlink" title="3.组件内的钩子函数"></a>3.组件内的钩子函数</h4><blockquote><p>组件内的钩子函数有三个：beforeRouteEnter，beforeRouteUpdate、beforeRouteLeave，直接被定义在每个vm实例上</p></blockquote></li></ul><h5 id="1-beforeRouteEnter"><a href="#1-beforeRouteEnter" class="headerlink" title="(1) beforeRouteEnter"></a>(1) beforeRouteEnter</h5><p>进入组件前被调用，此时组件实例还没有被创建，所以函数内部不能访问this，如果需要访问当前vue实例，可以通过next() 方法的回调函数接收一个vm实例。<br>应用：访问当前vue实例的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            msg: <span class="string">&#x27;这是消息&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">beforeRouteEnter</span>(<span class="params">to, <span class="keyword">from</span>, next</span>)</span> &#123;</span><br><span class="line">        <span class="comment">/* 访问当前vue实例 */</span></span><br><span class="line">        next(<span class="function"><span class="params">vm</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(vm.msg)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-beforeRouteUpdate"><a href="#2-beforeRouteUpdate" class="headerlink" title="(2) beforeRouteUpdate"></a>(2) beforeRouteUpdate</h5><p>在路由发生变化，但是组件被复用时被调用。</p><p>应用：父路由监听子路由变化</p><p>router.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">routes: [&#123;</span><br><span class="line">    path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line">    component: Home,</span><br><span class="line">    children: [&#123;</span><br><span class="line">        path: <span class="string">&#x27;goods&#x27;</span>,</span><br><span class="line">        name: <span class="string">&#x27;Goods&#x27;</span>,</span><br><span class="line">        component: Goods,</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        path: <span class="string">&#x27;about&#x27;</span>,</span><br><span class="line">        name: <span class="string">&#x27;About&#x27;</span>,</span><br><span class="line">        component: About,</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><h6 id="xxx-vue"><a href="#xxx-vue" class="headerlink" title="xxx.vue"></a>xxx.vue</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="function"><span class="title">beforeRouteUpdate</span>(<span class="params">to, <span class="keyword">from</span>, next</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;子路由发生变化&#x27;</span>)</span><br><span class="line">        next()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#####(3) beforeRouteLeave<br>离开组件时被调用，可以用来阻止页面离开，或者离开前销毁定时器等。<br>应用：页面离开前清除定时器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">       <span class="built_in">window</span>.clearInterval(<span class="built_in">this</span>.timer) <span class="comment">//清除定时器</span></span><br><span class="line">       next()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue路由拦截器</title>
      <link href="2018/08/12/Vue%E8%B7%AF%E7%94%B1%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
      <url>2018/08/12/Vue%E8%B7%AF%E7%94%B1%E6%8B%A6%E6%88%AA%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="拦截器的基本介绍"><a href="#拦截器的基本介绍" class="headerlink" title="拦截器的基本介绍"></a>拦截器的基本介绍</h1><h3 id="一、什么是拦截器"><a href="#一、什么是拦截器" class="headerlink" title="一、什么是拦截器:"></a>一、什么是拦截器:</h3><p>想拦截住我们的请求过程<br>比如你想在请求前做一些事情，拦截请求，等这件事做完之后再去请求<br>或者是要等请求结束之后做一些事情，再返回数据，可以拦截处理之后再返回<br>拦截器的作用:<br>一般来说，像数据交互之类的都要用到不同的身份验证，比如登录 token验证，验证用户<br>是否登录，如果没有登录，该用户就不能操作登录之后的内容，这就是拦截器的作用</p><h3 id="二、拦截器的分类"><a href="#二、拦截器的分类" class="headerlink" title="二、拦截器的分类"></a>二、拦截器的分类</h3><p>请求拦截器和响应拦截器/路由拦截器<br>PS:一般在请求拦截器中增加标识token或其他请求配置，在响应拦截器中对统一错误或状态码进行处理</p><ul><li>axios提供了拦截请求的功能，可以在发出请求前进行操作，例如统一为所有的请求添加token头信息。</li><li>axios提供了拦截响应的功能，可以在处理响应前进行操作，例如统一处理401身份认证错误。</li></ul><h3 id="三、代码实现"><a href="#三、代码实现" class="headerlink" title="三、代码实现"></a>三、代码实现</h3><ul><li>路由拦截器 : 通过路由进行判断</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//to表示要去的路由指向，from是指从哪个路由跳转过来的，next是判断操作</span></span><br><span class="line"><span class="comment">// 配置全局的vue路由拦截器  导航守卫(路由守卫)</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(to)</span><br><span class="line">   <span class="comment">// 判断 是否是跳转到 admin页 如果是则必须登录才能跳转</span></span><br><span class="line"><span class="keyword">if</span> (to.path <span class="keyword">in</span> [<span class="string">&quot;/路由地址&quot;</span>,<span class="string">&quot;/...&quot;</span>,<span class="string">&quot;/...&quot;</span>])&#123;</span><br><span class="line">   <span class="comment">//判断 是否登录</span></span><br><span class="line">   <span class="keyword">const</span> token = sessionStorage.getItem(<span class="string">&quot;token&quot;</span>)</span><br><span class="line">   <span class="keyword">if</span> (!token) &#123;</span><br><span class="line">       alert(<span class="string">&quot;没有登录，不能操作&quot;</span>)</span><br><span class="line">           <span class="comment">//跳转到登录页</span></span><br><span class="line">       next(<span class="string">&quot;/login?back=&quot;</span> + to.fullPath)</span><br><span class="line">       <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//放行</span></span><br><span class="line">next()</span><br><span class="line">&#125;)  </span><br><span class="line">request请求拦截器 : 在请求发送前进行一些操作</span><br></pre></td></tr></table></figure><ul><li><h4 id="request请求拦截器-在请求发送前进行一些操作"><a href="#request请求拦截器-在请求发送前进行一些操作" class="headerlink" title="request请求拦截器 : 在请求发送前进行一些操作"></a>request请求拦截器 : 在请求发送前进行一些操作</h4></li></ul><p>在main.js中:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> ‘axios’ <span class="comment">//引入axios</span></span><br><span class="line">Vue.prototype.$axios = axios <span class="comment">//配置</span></span><br><span class="line"><span class="comment">// 添加请求拦截器</span></span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> token = <span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;token&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (token) &#123;</span><br><span class="line">     config.headers.token = token <span class="comment">//把token放在请求头中（headers是对象类型）</span></span><br><span class="line">     <span class="comment">// 如果后端使用了rest framework jwt，如下：</span></span><br><span class="line">   <span class="comment">//config.headers.common[&#x27;Authorization&#x27;] = &#x27;jwt &#x27; + token // 头部设置</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error) <span class="comment">//打印错误信息</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>response响应拦截器 : 在接收到响应后进行一些操作</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 响应拦截器（在响应时自动会做的操作）</span></span><br><span class="line">axios.interceptors.response.use(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">　　<span class="keyword">return</span> response <span class="comment">// 成功直接返回</span></span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(error.request) <span class="comment">// 打印错误信息</span></span><br><span class="line"><span class="comment">//处理错误信息</span></span><br><span class="line"><span class="keyword">if</span> (error.request.status === <span class="number">400</span>)&#123;  <span class="comment">// 400错误的状态码</span></span><br><span class="line"><span class="built_in">window</span>.location.href = <span class="string">&quot;/&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> error </span><br><span class="line"><span class="comment">//返回错误信息</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
